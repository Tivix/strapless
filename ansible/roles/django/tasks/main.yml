---

# if aws_use_rds bool is set, we set environment variable for settings file to pick up
# This needs to be set before we run migrations, etc.
-   name: RDS ENDPOINT.
    lineinfile:
        dest={{ virtualenv_path }}/bin/activate
        line="export DJANGO_DATABASE_URL='{{ hostvars.localhost.rds.instance.endpoint }}';"
        insertafter=EOF
    when: aws_use_rds

-   name: Django TLD_NAME.
    lineinfile:
        dest={{ virtualenv_path }}/bin/activate
        line="export DJANGO_TLD_NAME='{{ project_root_domain }}';"
        insertafter=EOF

-   name: Django ALLOWED_HOSTS.
    lineinfile:
        dest={{ virtualenv_path }}/bin/activate
        line="export DJANGO_ALLOWED_HOST='{{ server_names }}';"
        insertafter=EOF

# TODO - ENV should be set to test to account for new aws env
-   name: Create the wsgi file
    template: src=wsgi_py.j2
            dest={{ virtualenv_path }}/{{ application_name }}_wsgi.py
            backup=yes
    notify: restart uwsgi

-   name: migration
    django_manage: virtualenv={{ virtualenv_path }}
                app_path={{ django_manage_py_path }}
                command="migrate --noinput --no-initial-data"
                settings={{ application_name }}.settings.{{ env }}
    environment:
        ENV: '{{ env }}'
        DJANGO_DATABASE_URL: '{% if aws_use_rds %}{{ hostvars.localhost.rds.instance.endpoint }}{% else %}localhost{% endif %}'
    tags:
        - quick
        - db

-   name: collectstatic
    django_manage: virtualenv={{ virtualenv_path }}
                app_path={{ django_manage_py_path }}
                command="collectstatic --noinput"
                settings={{ application_name }}.settings.{{ env }}
    environment:
        ENV: '{{ env }}'
    tags: quick

-   name: django-compressor compress
    django_manage: virtualenv={{ virtualenv_path }}
                app_path={{ django_manage_py_path }}
                command="compress"
                settings={{ application_name }}.settings.{{ env }}
    environment:
        ENV: '{{ env }}'
    when: env != 'dev'
    tags: quick

# TODO Rather than fixing permissions here, above commands should use proper user (no sudo root).
-   name: Ensure that the virtualenv file permissions are set properly
    file: path={{ virtual_envs_home }}
        recurse=yes
        owner={{ app_code_user }}
        group={{ app_code_group }}
        state=directory
    tags: quick
