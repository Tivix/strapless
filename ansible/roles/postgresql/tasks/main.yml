---

-   name: Install PostgreSQL
    apt: name={{ item }} update_cache={{ update_apt_cache }} state=latest
    with_items:
        - postgresql
        - postgresql-contrib
        - libpq-dev
        - python-psycopg2
    tags: db
    when: not aws_use_rds

-   name: Install PostgreSQL - client only
    apt: name={{ item }} update_cache={{ update_apt_cache }} state=latest
    with_items:
        - postgresql-client
        - libpq-dev
        - python-psycopg2
    tags: db
    when: aws_use_rds

-   name: Ensure the PostgreSQL service is running
    service: name=postgresql state=started enabled=yes
    tags: db
    when: not aws_use_rds or env == "dev"

-   name: Ensure database is dropped
    sudo_user: postgres
    postgresql_db: name={{ db_name }}
                encoding='UTF-8'
                lc_collate='en_US.UTF-8'
                lc_ctype='en_US.UTF-8'
                template='template0'
                state=absent
    when: not aws_use_rds and bootstrap and env == "dev"
    tags: db

-   name: Ensure database is created
    sudo_user: postgres
    postgresql_db: name={{ db_name }}
                encoding='UTF-8'
                lc_collate='en_US.UTF-8'
                lc_ctype='en_US.UTF-8'
                template='template0'
                state=present
    tags: db
    when: not aws_use_rds or env == "dev"

-   name: Ensure user has access to the database
    sudo_user: postgres
    postgresql_user: db={{ db_name }}
                name={{ db_user }}
                password={{ db_password }}
                priv=ALL
                state=present
    tags: db
    when: not aws_use_rds or env == "dev"

-   name: Ensure user does not have unnecessary privileges
    sudo_user: postgres
    postgresql_user: name={{ db_user }}
                role_attr_flags=NOSUPERUSER,NOCREATEDB
                state=present
    tags: db
    when: not aws_use_rds or env == "dev"

-   name: Ensure user has access to the database on dev
    sudo_user: postgres
    postgresql_user: db={{ db_name }}
                name={{ db_user }}
                password={{ db_password }}
                priv=ALL
                state=present
                role_attr_flags=SUPERUSER,CREATEDB
    tags: db
    when: not aws_use_rds or env == "dev"

-   name: Ensure user does not have unnecessary privileges
    sudo_user: postgres
    postgresql_user: name={{ db_user }}
                role_attr_flags=SUPERUSER,CREATEDB
                state=present
    tags: db
    when: not aws_use_rds or env == "dev"
