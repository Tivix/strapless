---

-   name: Get the username running the playbook
    local_action: command whoami
    register: username_on_the_host
    tags: quick

-   name: Create ec2 key
    ec2_key:
        name: "{{ username_on_the_host.stdout }} public key via Ansible"
        key_material: "{{ item }}"
        region: "{{ aws_region }}"
        wait: true
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
    with_file: ~/.ssh/id_rsa.pub
    tags: quick

-   name: Create VPC + subnets
    ec2_vpc:
        state: present
        wait: true
        cidr_block: 10.0.0.0/16
        dns_hostnames: true
        internet_gateway: true
        resource_tags:
            Name: "{{ aws_project_name_env_branch }}"
            Env: "{{ aws_env }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        subnets:
          - cidr: 10.0.1.0/24
            az: "{{ aws_region }}{{ aws_zone_1 }}"
            resource_tags:
                Name: "{{ aws_project_name_env_branch }}-subnet-1"
                Env: "{{ aws_env }}"
          - cidr: 10.0.2.0/24
            az: "{{ aws_region }}{{ aws_zone_2 }}"
            resource_tags:
                Name: "{{ aws_project_name_env_branch }}-subnet-2"
                Env: "{{ aws_env }}"
        route_tables:
          - subnets:
              - 10.0.1.0/24
            routes:
              - dest: 0.0.0.0/0
                gw: igw
    register: vpc
    tags: quick    

-   name: Security group for ELB
    ec2_group:
        name: "{{ aws_project_name_ascii_env_branch }}_elb"
        description: ELB security group
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
    register: sg_elb
    tags: quick

-   name: Security group for EC2 instances
    ec2_group:
        name: "{{ aws_project_name_ascii_env_branch }}_ec2"
        description: EC2 security group
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ sg_elb['group_id'] }}"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
    register: sg_ec2
    tags: quick

-   name: Create EC2 instances
    ec2:
        key_name: "{{ username_on_the_host.stdout }} public key via Ansible"
        # group: default
        instance_type: "{{ aws_ec2_instance_type }}"
        image: "{{ aws_ami_id }}"
        assign_public_ip: true
        wait: true
        exact_count: "{{ aws_num_ec2_instances }}"
        count_tag:
            Name: "{{ aws_project_name_env_branch }}"
        instance_tags:
            Name: "{{ aws_project_name_env_branch }}"
            Env: "{{ aws_env }}"
        region: "{{ aws_region }}"
        group_id: "{{ sg_ec2['group_id'] }}"
        vpc_subnet_id: "{{ vpc.subnets[0].id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        zone: "{{ aws_region }}{{ aws_zone_1 }}"
    register: ec2
    tags: quick

-   name: Add new instance to ansible host group
    add_host: hostname={{ item.public_ip }} groupname=aws_webservers
    with_items: ec2.instances
    tags: quick

-   name: Add existing instance to ansible host group
    add_host: hostname={{ item.public_ip }} groupname=aws_webservers
    with_items: ec2.tagged_instances
    tags: quick

-   local_action:
        module: ec2_elb_lb
        name: "{{ aws_project_name_ascii_env_branch[:30] }}" # Limit to 30 characters
        state: present
        subnets: "{{ vpc.subnets[0].id }}"
        listeners:
            - protocol: http
              load_balancer_port: 80
              instance_port: 80
        security_group_ids: "{{ sg_elb['group_id'] }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        health_check:
            ping_protocol: tcp
            ping_port: 80
            response_timeout: 2 # seconds
            interval: 5
            unhealthy_threshold: 3
            healthy_threshold: 5
    register: ec2_elb_lb_output

# de-register in case out of service etc. also might be handy in the future in
# rolling updates etc. across multiple ec2 instances.
-   name: De-Register EC2 instances from all ELB's
    local_action:
        module: ec2_elb
        instance_id: "{{ item['id'] }}"
        state: 'absent'
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
    with_items: ec2.tagged_instances

-   name: Register EC2 instances with ELB
    local_action:
        module: ec2_elb
        instance_id: "{{ item['id'] }}"
        state: 'present'
        ec2_elbs: "{{ ec2_elb_lb_output['elb']['name'] }}"
        wait: no    # because it could be 'out of service etc. since app isn't running yet
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
    with_items: ec2.tagged_instances

-   name: Create route 53 DNS entry pointing to ELB
    route53:
        command: create
        zone: "{{ project_root_domain }}"
        record: "{{ subdomain_record_name }}.{{ project_root_domain }}"
        type: A
        value: "{{ ec2_elb_lb_output['elb']['dns_name'] }}"
        alias: True
        overwrite: True
        alias_hosted_zone_id: "{{ ec2_elb_lb_output['elb']['hosted_zone_id'] }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"

-   name: Security group for RDS postgres database
    # TODO: restrict outbound also??
    ec2_group:
        name: "{{ aws_project_name_ascii_env_branch }}-rds"
        description: RDS security group
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            group_id: "{{ sg_ec2['group_id'] }}"
    register: sg_rds
    when: aws_use_rds
    tags: quick    

-   name: RDS Subnet Group
    rds_subnet_group:
        state: present
        region: "{{ aws_region }}"
        name: "{{ aws_project_name_ascii_env_branch }}"
        description: Ansible Generated Subnet Group
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        subnets:
          - "{{ vpc.subnets[0].id }}"
          - "{{ vpc.subnets[1].id }}"
    when: aws_use_rds

-   name: Create RDS database
    rds:
        command: create
        instance_name: "{{ aws_project_name_ascii_env_branch }}"
        db_engine: postgres
        size: "{{ aws_rds_size_gbs }}"
        instance_type: "{{ aws_rds_instance_type }}"
        db_name: "{{ project_name }}"
        username: "{{ db_user }}"
        password: "{{ db_password }}"
        subnet: "{{ aws_project_name_ascii_env_branch }}"
        vpc_security_groups: "{{ sg_rds['group_id'] }}"
        publicly_accessible: no
        wait: true
        wait_timeout: 600
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        tags:
            Project: "{{ project_name }}"
            Environment: "{{ aws_env }}"
    register: rds
    when: aws_use_rds
    tags: quick    
