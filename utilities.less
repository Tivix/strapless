// utilities

.hide, .hidden { display: none !important;}

.clearfix { .clearfix();}

.make-color-classes-for(@semantic-colors);

#sl-tools {
	.quadratic-compare(@midpoint, @c1, @c2) {
		// compares c1 and c2 to midpoint, assigns a @farther and @closer
		// midpoint doesn't have to be an averaged color, it can be a single color

		@r-values-m-c1: 2*(red(@c1) - red(@midpoint))*(red(@c1) - red(@midpoint));
		@g-values-m-c1: 4*(green(@c1) - green(@midpoint))*(green(@c1) - green(@midpoint));
		@b-values-m-c1: 3*(blue(@c1) - blue(@midpoint))*(blue(@c1) - blue(@midpoint));

		@r-values-m-c2: 2*(red(@c2) - red(@midpoint))*(red(@c2) - red(@midpoint));
		@g-values-m-c2: 4*(green(@c2) - green(@midpoint))*(green(@c2) - green(@midpoint));
		@b-values-m-c2: 3*(blue(@c2) - blue(@midpoint))*(blue(@c2) - blue(@midpoint));

		@d-m-c1: sqrt(@r-values-m-c1 + @g-values-m-c1 + @b-values-m-c1);
		@d-m-c2: sqrt(@r-values-m-c2 + @g-values-m-c2 + @b-values-m-c2);

		.resolve();

		.resolve() when (@d-m-c2 > @d-m-c1) {
			@farther: @c2;
			@closer: @c1;
		}

		.resolve() when (default()) {
			@farther: @c1;
			@closer: @c2;
		}
	}

	.set-contrast-ratio(@a, @b) {
		// sets variable @contrast-ratio to contrast ratio between two colors
		@l1: unit(luma(@a))/100;
		@l2: unit(luma(@b))/100;
		@contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
	}

	.set-contrast-ratio(@a, @b) when (luma(@b) > luma(@a)) {
		@l1: unit(luma(@b))/100;
		@l2: unit(luma(@a))/100;
		@contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
	}

	.set-contrast-ratio(@a, @b) when (luma(@b) = luma(@a)) {
		@contrast-ratio: 1;
	}

	.tint-text(@bg-color) {
		.tint(@bg-color, 1, 1);

		.tint(@color, @contrast-ratio, @index) when (@contrast-ratio < 7) and (@index < 15) and (luma(@color) < 100%) {
			// slowly adds white until contrast ratio is met

			#sl-tools.set-contrast-ratio(@bg-color, @color);

			.tint(lighten(@bg-color, @index*5 + 5%); @contrast-ratio; @index + 1);
		}

		.tint(@color, @contrast-ratio, @index) when (default()) {
			color: @color;
		}
	}

	.shade-text(@bg-color) {
		.shade(@bg-color, 1, 1);

		.shade(@color, @contrast-ratio, @index) when (@contrast-ratio < 4.5) and (@index < 15) {
			// slowly adds black until contrast ratio is met

			#sl-tools.set-contrast-ratio(@bg-color, @shade);

			@shade: darken(@bg-color, @index*5 + 10%);

			.shade(@shade; @contrast-ratio; @index + 1);
		}

		.shade(@color, @contrast-ratio, @index) when (default()) {
			color: @color;
		}
	}
}
