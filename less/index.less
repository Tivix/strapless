//this is the index.less for strapless-web, NOT strapless!

// TODO: get rid of elements folder?
// TODO: decide if we're making something like sl-palette and sl-pattern available to the dev
// it'd be really handy to have something that "just worked" and showed their current palette

@import "strapless/strapless";
@import "strapless/sl-palette";
@import "strapless/sl-pattern";
@import "strapless/sl-tables";

body {
  padding:74px 0 0;
  font-family:'Bitter';
  section:last-child {
    margin-bottom:0;
  }
}
.feature {
  @color: @success;

  position: relative;
  overflow: hidden;
  background-color: @color;
  .contrast-text-against(@color);
  min-height: 500px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  .dots1(@color1; @scale: 20;);
  margin-bottom: @padding*2;
  border-radius: @border-radius;

  h1 {
    font-size: 62px;
    font-weight: bold;
  }

  > *:first-child {
    position: relative;
    margin: 0 auto;
    max-width: 620px;
    vertical-align: middle;
    text-align: center;
  }
}

#less_variable_test {
  @test: @base-color;
  @test-name: 'base color';

  .variable-test(@test; @test-name;);

  .variable-test(@test; @test-name;) {
    &:before {
      content: "@{test-name}: ";
    }
    &:after {
      display:block;
      content:"@{test}";
    }
  }

  .variable-test(@test; @test-name;) when (isColor(@test)) {    
    &:before {
      display: inline-block;
      width: @padding;
      height: @padding;
      background: @test;
      content: "";
    }
    &:after {
      display:block;
      content:"@{test-name}: @{test}";
    }
  }
  
}


#palette_preview_container {
  margin-bottom:200px;
}


#palette_preview {

  // TODO: deprecate, or write as a theme that works atop sl-palette

    float:right;
    //clear:both;

    @width: 90px;
    @padding: 8px;

    clear: both;

    margin-bottom: 20px;

    z-index:-100;

    .swatch {
        position: relative;
        font-size: 12px;
        line-height: 42px;
        font-weight: bold;
        margin-bottom: @padding;
        width: @width;
        height: @width;
        line-height: @width*1.8;
        margin-right: @padding;
        float: right;
        text-align: right;
        vertical-align: bottom;
        // border: 1px solid @gray-darker;
        // text-indent: -9999px;

        &:nth-child(2n) {
          min-width: 250px;
        }

        &:nth-child(3n) {
          min-width: 380px;
        }

        &:nth-child(4n+2) {
          width: 320px;
        }

        &:nth-child(5n-1) {
          width:190px;
        }

        &:nth-child(7n) {
          width: 140px;
        }

        &:nth-child(20n) {
          min-width:0;
          width: 540px;
        }


        p {
            text-align: center;
            line-height: 100px;
        }

        input {
            width: 90px;
            //margin-top:14px;
            margin-left: 14px;
        }

        &:last-child {
            margin-bottom: 0;
        }

        &:after {
          display: inline;
          width:@padding;
          content: "";
          margin-right:@padding;
          // content: " luma: @{thisluma}, lit: @{thislit}";

        }
    }

    .color(@color) {
        background-color:@color;
        .contrast-text-against(@color);
        // border:1px solid darken(@color, 5%);

        &:before, &:after {
          background-color:@color;
        }
    }

    .color1 { .color(@color1);}
    .color1a { .color(@color1a);}
    .color1b { .color(@color1b);}
    .color1c { .color(@color1c);}

    .color2 { .color(@color2);}
    .color2a { .color(@color2a);}
    .color2b { .color(@color2b);}
    .color2c { .color(@color2c);}

    .color3 { .color(@color3);}
    .color3a { .color(@color3a);}
    .color3b { .color(@color3b);}
    .color3c { .color(@color3c);}

    .color4 { .color(@color4);}
    .color4a { .color(@color4a);}
    .color4b { .color(@color4b);}
    .color4c { .color(@color4c);}

    .gray { .color(@gray);}
    .gray-dark { .color(@gray-dark);}
    .gray-darker { .color(@gray-darker);}
    .gray-light { .color(@gray-light);}
    .gray-lighter { .color(@gray-lighter);}

    .info { .color(@info);}
    .warning { .color(@warning);}
    .success { .color(@success);}
    .failure { .color(@failure);}


    .scheme-type {
      &:after {
        content:"@{scheme-type}";
      }
    }

    .luma {
      @luma: ceil(luma(@base-color));
      &:after {
        content:"@{luma}";
      }
    }

    .lit {
      &:after {
        content:"@{lit}";
      }
    }

    .scheme-type, .luma, .lit {
      //display:none;
    }

}

#colors {
  .palette-preview {
    margin-top:0;
  }
}

.color-wheel-test {
  margin: 0 auto;
  h1 {
    font-size: 10px;
    text-align: center;
    line-height: 42px;
  }

  > .color {
    display:block;
    width: 100px;
    position: absolute;
    top:37px;
    left:-7px;

    &:after {
      content:"";
      @width: 12px;
      display: block;
      width: @width;
      height: @width;
      border-radius: 50%;
    }
  }
}

.color-wheel-test(@color-wheel; @color: @base-color;) {
  @base-color-wheel: @@color-wheel;

  #strapless.load-color-wheels();

  position: relative;
  float: left;
  border: 1px solid @gray-lighter;
  border-radius: 50%;
  width: 88px;
  height: 88px;
  //clear: both;
  margin-right: 33px;
  margin-bottom: 21px;

  > * {
    &:after {
      font-size:10px;
      text-align: center;
      font-family:monospace;
      line-height:1;
    }
  }

  .color1 {
    &:after {
      background: @color;
      .contrast-text-against(@color);
      content:"1";
    }
  }

  .color2 {
    @spin: extract(@base-color-wheel, 1);
    @c: spin(@color, @spin);
    .rotate(@spin);
    &:after {
      background: @c;
      .contrast-text-against(@c);
      content:"2";
      .rotate(-@spin);
    }
  }

  .color3 {
    @spin: extract(@base-color-wheel, 2);
    @c: spin(@color, @spin);
    .rotate(@spin);
    &:after {
      background: @c;
      .contrast-text-against(@c);
      content:"3";
      .rotate(-@spin);
    }
  }

  .color4 {
    @spin: extract(@base-color-wheel, 3);
    @c: spin(@color, @spin);
    .rotate(@spin);
    &:after {
      background: @c;
      .contrast-text-against(@c);
      content:"4";
      .rotate(-@spin);
    }
  }
}

#color_wheel_test {
  .color-wheel-test(@base-color-wheel);
}

#color_wheel_accented {
  .color-wheel-test(accented);
}

#color_wheel_complementary {
  border: 1px solid black;
  .color-wheel-test(complementary);
}

#color_wheel_triadic {
  .color-wheel-test(triadic);
}

#color_wheel_tetradic {
  .color-wheel-test(tetradic);
}

#color_wheel_monochromatic {
  .color-wheel-test(monochromatic);
}

#color_wheel_square {
  .color-wheel-test(square);
}

#color_wheel_ebb {
  .color-wheel-test(ebb);
}

#color_wheel_flow {
  .color-wheel-test(flow);
}

// pull base values from @base-color. used in constructing new colors.
// TODO: replace these

@sat: saturation(@base-color);
@lit: floor(lightness(@base-color));
@link-color: blue;
@text-color: #333;

.sl-links {
  margin-bottom: @padding;
  display:inline-block;
  li {
    float: left;
    margin-right: @padding;

    &:last-child {
      margin-right: 0;
    }
  }
}