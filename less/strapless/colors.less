// configurables

// TODO: decide if we want these here or in variables.less
// or maybe only @base-color and @base-color-wheel here?

@base-color: #798FE8;
@base-color-wheel:  accented;

@action:    @color1;
@reaction:  @color2;
@info:      #5bc0de;
@warning:   #f0ad4e;
@success:   #5cb85c;
@failure:   #d0534f;

// variable name lists

@semantic-colors:   action,
                    reaction,
                    info,
                    warning,
                    success,
                    failure;

@color-wheels:      accented, complementary, complementary-b, triadic, triadic-b,
                    tetradic, tetradic-b, square, ebb, flow, monochromatic, monochromatic-b;

@huge-palette:      color1, color1a, color1b, color1c, color2, color2a, color2b, color2c,
                    color3, color3a, color3b, color3c, color4, color4a, color4b, color4c,
                    success, failure, action, reaction, info, warning,
                    gray-lighter, gray-light, gray, gray-dark, gray-darker;

@main-colors:       color1, color2, color3, color4;

@all-colors:        color1, color1a, color1b, color1c, color2, color2a, color2b, color2c,
                    color3, color3a, color3b, color3c, color4, color4a, color4b, color4c;

#strapless.make-palette(@base-color; @base-color-wheel;);

#strapless {

  .make-palette(@color; @wheel) {
    #strapless.load-scheme-type(@color);
    #strapless.load-color-wheels();
    #strapless.make-main-colors(@color; @wheel);
    #strapless.make-subcolors(@color; @wheel; @scheme-type);
    #strapless.load-gray-bases(@color);
    #strapless.make-grays(@color);
  }

  .load-scheme-type(@color) {
    // sets @scheme-type to dark, medium or light depending on color given
    @scheme-type-base: unit(ceil(luma(@color)*3/100));
    @scheme-types: dark, medium, light;
    @scheme-type: extract(@scheme-types, @scheme-type-base);
  }

  .load-color-wheels() {
    @complement: 180deg;
    @triadic-pair: 120deg;
    @accent: 45deg;
    @analog: 15deg;

    @accented:        @complement,
                      @accent,
                      -@accent;

    @complementary:   @complement,
                      @analog,
                      @complement + @analog;


    @complementary-b: @complement,
                      -@analog,
                      @complement - @analog;

    @triadic:         @triadic-pair,
                      -@triadic-pair,
                      -@analog;

    @triadic-b:       -@triadic-pair,
                      @triadic-pair,
                      @analog;

    @tetradic:        @complement,
                      @accent,
                      @complement + @accent;

    @tetradic-b:      @complement,
                      -@accent,
                      @complement - @accent;

    @square:          @complement,
                      @complement/2,
                      -@complement/2;

    @ebb:             @complement + @analog,
                      @analog,
                      @accent;

    @flow:            @complement - @analog,
                      -@analog,
                      -@accent;

    @monochromatic:   @accent,
                      @analog/2,
                      -@analog/2;

    @monochromatic-b: -@accent,
                      @analog/2,
                      -@analog/2;
  }

  .make-main-colors(@color; @wheel) {
    // turn the wheel into its variable form and use it to spin other main colors
    @wheel-var: @@wheel;
    @color1: @color;
    @color2: spin(@color, extract(@wheel-var, 1));
    @color3: spin(@color, extract(@wheel-var, 2));
    @color4: spin(@color, extract(@wheel-var, 3));
  }

  .make-subcolors(@color; @wheel; @scheme-type) {
    #strapless.make-main-colors(@color; @wheel);

    @a-by: 10%;
    @b-by: 10%; // N/A
    @c-by: 10%;
    @ceiling: white;
    @floor: black;
    @compare: @color1;

    // color a is a lighter analog

    @color1a: contrast(@ceiling; spin(lighten(@color1, @a-by), @analog); spin(lighten(@color1, @a-by), -@analog););
    @color2a: contrast(@ceiling; spin(lighten(@color2, @a-by), @analog); spin(lighten(@color2, @a-by), -@analog););
    @color3a: contrast(@ceiling; spin(lighten(@color3, @a-by), @analog); spin(lighten(@color3, @a-by), -@analog););
    @color4a: contrast(@ceiling; spin(lighten(@color4, @a-by), @analog); spin(lighten(@color4, @a-by), -@analog););

    // color b is an accent

    @color1b: contrast(@compare; spin(@color1, @accent); spin(@color1, -@accent););
    @color2b: contrast(@compare; spin(@color2, @accent); spin(@color2, -@accent););
    @color3b: contrast(@compare; spin(@color3, @accent); spin(@color3, -@accent););
    @color4b: contrast(@compare; spin(@color4, @accent); spin(@color4, -@accent););

    // color c is a darker analog

    @color1c: contrast(@floor; spin(darken(@color1, @c-by), @analog); spin(darken(@color1, @c-by), -@analog););
    @color2c: contrast(@floor; spin(darken(@color2, @c-by), @analog); spin(darken(@color2, @c-by), -@analog););
    @color3c: contrast(@floor; spin(darken(@color3, @c-by), @analog); spin(darken(@color3, @c-by), -@analog););
    @color4c: contrast(@floor; spin(darken(@color4, @c-by), @analog); spin(darken(@color4, @c-by), -@analog););
  }

  .make-subcolors(@color; @wheel; @scheme) when (@scheme-type = light) {
    #strapless.make-main-colors(@color; @wheel);

    @a-by: 5%;
    @c-by: 8%;
    @ceiling: white;
    @floor: #515151;
    @compare: @color1;

    // color a is a lighter analog

    @color1a: contrast(@ceiling; spin(lighten(@color1, @a-by), @analog); spin(lighten(@color1, @a-by), -@analog););
    @color2a: contrast(@ceiling; spin(lighten(@color2, @a-by), @analog); spin(lighten(@color2, @a-by), -@analog););
    @color3a: contrast(@ceiling; spin(lighten(@color3, @a-by), @analog); spin(lighten(@color3, @a-by), -@analog););
    @color4a: contrast(@ceiling; spin(lighten(@color4, @a-by), @analog); spin(lighten(@color4, @a-by), -@analog););

    // color b is an accent

    @color1b: contrast(@compare; spin(@color1, @accent); spin(@color1, -@accent/2););
    @color2b: contrast(@compare; spin(@color2, @accent); spin(@color2, -@accent/2););
    @color3b: contrast(@compare; spin(@color3, @accent); spin(@color3, -@accent/2););
    @color4b: contrast(@compare; spin(@color4, @accent); spin(@color4, -@accent/2););

    // color c is a darker analog

    @color1c: contrast(@floor; spin(darken(@color1, @c-by), @analog); spin(darken(@color1, @c-by), -@analog););
    @color2c: contrast(@floor; spin(darken(@color2, @c-by), @analog); spin(darken(@color2, @c-by), -@analog););
    @color3c: contrast(@floor; spin(darken(@color3, @c-by), @analog); spin(darken(@color3, @c-by), -@analog););
    @color4c: contrast(@floor; spin(darken(@color4, @c-by), @analog); spin(darken(@color4, @c-by), -@analog););
  }

  .make-subcolors(@color; @wheel; @scheme) when (@scheme-type = dark) {
    #strapless.make-main-colors(@color; @wheel);

    @a-by: 8%;
    @c-by: 4%;
    @ceiling: #515151;
    @floor: black;
    @compare: @color1;

    // color a is a lighter analog

    @color1a: contrast(@ceiling; spin(lighten(@color1, @a-by), @analog); spin(lighten(@color1, @a-by), -@analog););
    @color2a: contrast(@ceiling; spin(lighten(@color2, @a-by), @analog); spin(lighten(@color2, @a-by), -@analog););
    @color3a: contrast(@ceiling; spin(lighten(@color3, @a-by), @analog); spin(lighten(@color3, @a-by), -@analog););
    @color4a: contrast(@ceiling; spin(lighten(@color4, @a-by), @analog); spin(lighten(@color4, @a-by), -@analog););

    // color b is an accent

    @color1b: contrast(@compare; spin(@color1, @accent); spin(@color1, -@accent););
    @color2b: contrast(@compare; spin(@color2, @accent); spin(@color2, -@accent););
    @color3b: contrast(@compare; spin(@color3, @accent); spin(@color3, -@accent););
    @color4b: contrast(@compare; spin(@color4, @accent); spin(@color4, -@accent););

    // color c is a darker analog

    @color1c: contrast(@floor; spin(darken(@color1, @c-by), @analog); spin(darken(@color1, @c-by), -@analog););
    @color2c: contrast(@floor; spin(darken(@color2, @c-by), @analog); spin(darken(@color2, @c-by), -@analog););
    @color3c: contrast(@floor; spin(darken(@color3, @c-by), @analog); spin(darken(@color3, @c-by), -@analog););
    @color4c: contrast(@floor; spin(darken(@color4, @c-by), @analog); spin(darken(@color4, @c-by), -@analog););
  }

  .load-gray-bases(@color) {
    @gray-base: desaturate(@color; 85%);
    @gray-step: 7%;

    @gray-bases:  @gray-lightest-base,
                  @gray-lighter-base,
                  @gray-light-base,
                  @gray-base,
                  @gray-dark-base,
                  @gray-darker-base,
                  @gray-darkest-base,
                  darken(@gray-darkest-base, 3%); // placeholder for overflow

    @gray-light-base:             lighten(@gray-base; @gray-step);
    @gray-lighter-base:           lighten(@gray-base; @gray-step * 2);
    @gray-lightest-base:          lighten(@gray-base; @gray-step * 3);

    @gray-dark-base:              darken(@gray-base; @gray-step);
    @gray-darker-base:            darken(@gray-base; @gray-step * 2);
    @gray-darkest-base:           darken(@gray-base; @gray-step * 3);
  }

  .make-grays(@color) {

    #strapless.load-gray-bases(@color);

    @gray-lighter:      extract(@gray-bases; 0 + @scheme-type-base);
    @gray-light:        extract(@gray-bases; 1 + @scheme-type-base);
    @gray:              extract(@gray-bases; 2 + @scheme-type-base);
    @gray-dark:         extract(@gray-bases; 3 + @scheme-type-base);
    @gray-darker:       extract(@gray-bases; 4 + @scheme-type-base);
  }

  .make-palette(@color: @base-color; @wheel: @base-color-wheel) when (luma(@color) > 98%) {
    #strapless.make-palette(darken(@color, 6%);@wheel);
    @body-bg: @color;
  }

  .make-palette(@color: @base-color; @wheel: @base-color-wheel) when (luma(@color) < 3%) {
    #strapless.make-palette(lighten(@color, 7.5%);@wheel);
    @body-bg: @color;
  }
}