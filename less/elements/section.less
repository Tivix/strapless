// body { border: 5px solid red;}

section {
  width: 100%;
  margin: 0 auto;
  padding: @margin @margin/2;
  .clearfix();

  .on-tablet({
    padding: @margin ~"calc((100% - @{column-width})/2)";
  });

  .on-desktop({
    padding: @margin ~"calc((100% - @{page-width})/2 + @{margin})";
  });

  padding-bottom: 1.6*@margin;

  > * {
    max-width: @max-width;
  }

  section {
    width: auto;
    padding-left: 0;
    padding-right: 0;
  }

  .make-section-colors-for(@semantic-colors);
}

.make-section-colors-for(@colors) {
  // make section colors for a list of color variable names
  // sections will use variable names as class names

  @iterations: length(@colors);

  .make-section-color(1);

  .make-section-color(@index) when (@index <= @iterations) {

    @color-name: extract(@colors, @index);
    @this-color: @@color-name;

    &.@{color-name} {
      .section-color(@this-color);
    }

    .make-section-color(@index + 1);
  }
}

.section-color(@color) {
  .set-lumafix(@color, @background);
  background-color: @lumafix;
  .contrast-text-against(@lumafix);
}

.section-color(@color) when (@color = @warning) {
  // preferentially tint for more urgency
  & when (@contrast-ratio > 3) {
    h1, h2, h3 { .contrast-text-against(@color; 3; @mode: tint;);}
  }
}

.section-color(@color) when (@color = @failure) {
  // preferentially tint for more urgency
  & when (@contrast-ratio > 3) {
    h1, h2, h3 { .contrast-text-against(@color; 3; @mode: tint;);}
  }
}
