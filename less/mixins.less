.contrast-text-against(@color: @background; @contrast-standard: 7; @mode: auto;) {
  // adds tone to background color until contrast standard is met
  // uses result as text color

  @start: 50%;
  @iterations: 10;
  @contrast: mix(@tone, @color, @start + @index*5);
  @index: 0;

  .tone(@color);
  .contrast-text(1, @tone, 1);

  .tone(@color) when (@mode = tint) {
    @tone: white;
  }

  .tone(@color) when (@mode = shade) {
    @tone: white;
  }

  .tone(@color) when (default()) {
    .set-tone(@color);
  }

  .contrast-text(@contrast-ratio, @tone, @index)
       when (@contrast-ratio < @contrast-standard)
        and (@index < @iterations) {
    .set-contrast-ratio(@color, @contrast);
    .contrast-text(@contrast-ratio; @tone; @index + 1);
  }

  .contrast-text(@contrast-ratio, @tone, @index) when (default()) {
    color: @contrast;
  }
}

.contrast-text-against(@color: @background, @contrast-standard: 9)
                 when (@color = white)
                  and (@contrast-standard >= 7) {
  // the objectively correct text color against white
  // arrived at by monks after years of meditation and seclusion

  // a contrast ratio of 9, not too harsh, not faded away
  // not angry like #333, or non-committal like #606060
  // with the subtlest of references to san francisco

  color: #494949;
}

.invert-text-against(@color; @contrast-standard: 7; @button: false;) {

  // always results in white text
  // darkens given background when needed to meet contrast standard

  @iterations: 10;

  .set-contrast-ratio(@color, white);
  .darken-bg(@color, @contrast-ratio, 1);

  .darken-bg(@bg-color, @contrast-ratio, @index)
       when (@contrast-ratio < 4.5)
        and (@index < @iterations) {
    @new-bg-color: darken(@bg-color, 5% + @index);
    .set-contrast-ratio(white, @new-bg-color);
    .darken-bg(@new-bg-color, @contrast-ratio, @index + 1);
  }

  .darken-bg(@bg-color, @contrast-ratio, @index) when (default()) {
    background-color: @bg-color;
    color: white;

    & when (@button = true) {
      // button option lets us handle active state here when we know the color
      &:active {
        background-color: darken(@bg-color, 5%);
        color: mix(@bg-color, white, 5%);
      }
    }
  }
}

.color-text(@color; @text-background: @background; @contrast-standard: 7) {

  // darkens text against a background
  // like tint- or shade-, only works with lighter backgrounds
  // not guaranteed to meet @contrast-standard

  @iterations: 15;

  .set-contrast-ratio(@color, @text-background);
  .darken-text(@color, @contrast-ratio, 1);

  .darken-text(@text-color, @contrast-ratio, @index)
         when (@contrast-ratio < @contrast-standard)
          and (@index < @iterations) {
    @new-text-color: darken(@text-color, 5%);
    .set-contrast-ratio(@text-background, @new-text-color);
    .darken-text(@new-text-color, @contrast-ratio, @index + 1);
  }

  .darken-text(@text-color, @contrast-ratio, @index) when (default()) {
    color: @text-color;
  }
}

.colorize(@color) {
  // sets a background color and makes sure text works with it
  background-color: @color;
  .contrast-text-against(@color);
}

.make-color-classes-for(@colors) {
  // takes a list of variable names, creates color(ize) classes for them
  // names must have corresponding variables

  @iterations: length(@colors);

  .make-color-class(1);

  .make-color-class(@index) when (@index <= @iterations) {
    @color-name: extract(@colors, @index);

    .color-name(@color) when (iscolor(@color)) {
      .@{color-name} {
        .colorize(@color-name);
      }
    }

    .color-name(@color) when not (iscolor(@color)) {
      @this-color: @@color-name;

      .@{color-name} {
        .colorize(@this-color);
      }
    }

    .color-name(@color-name);

    .make-color-class(@index + 1);
  }
}

.set-contrast-ratio(@a, @b) {
  // sets variable @contrast-ratio to contrast ratio between two colors

  @l1: unit(luma(@a))/100;
  @l2: unit(luma(@b))/100;
  @contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
}

.set-contrast-ratio(@a, @b) when (luma(@b) > luma(@a)) {
  @l1: unit(luma(@b))/100;
  @l2: unit(luma(@a))/100;
  @contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
}

.set-contrast-ratio(@a, @b) when (luma(@b) = luma(@a)) {
  @contrast-ratio: 1;
}

.set-distance(@a, @b) {
  // sets variable @distance to distance between two colors
  // distance is RGB space units

  // RGB space model isn't perfectly cubic, but instead
  // adjusted for human perception

  @r-values-a-b: 2*(red(@b) - red(@a))*(red(@b) - red(@a));
  @g-values-a-b: 4*(green(@b) - green(@a))*(green(@b) - green(@a));
  @b-values-a-b: 3*(blue(@b) - blue(@a))*(blue(@b) - blue(@a));

  @distance: sqrt(@r-values-a-b + @g-values-a-b + @b-values-a-b);
}

.set-closer-farther(@compare, @c1, @c2) {
  // compares c1 and c2 to a given color, assigns a @farther and @closer
  // distance is RGB space units

  .set-distance-m-c1() {
    .set-distance(@compare, @c1);
    @distance-m-c1: @distance;
  }

  .set-distance-m-c2() {
    .set-distance(@compare, @c2);
    @distance-m-c2: @distance;
  }

  .resolve() when (@distance-m-c2 > @distance-m-c1) {
    @farther: @c2;
    @closer: @c1;
  }

  .resolve() when (default()) {
    @farther: @c1;
    @closer: @c2;
  }

  .set-distance-m-c1();
  .set-distance-m-c2();

  .resolve();
}

.set-farther-closer(@compare, @c1, @c2) {
  // just another closer-farther
  .set-closer-farther(@compare, @c1, @c2);
}

.set-tone(@color) {
  // sets variable @tone to white or black, depending on which is better for text contrast

  .set-contrast-ratio-black() {
    .set-contrast-ratio(@color, black);
    @contrast-ratio-black: @contrast-ratio;
  }

  .set-contrast-ratio-white() {
    .set-contrast-ratio(@color, white);
    @contrast-ratio-white: @contrast-ratio;
  }

  .set-tone(@color) when (@contrast-ratio-black > @contrast-ratio-white) {
    @tone: black;
  }

  .set-tone(@color) when (default()) {
    @tone: white;
  }

  .set-contrast-ratio-black();
  .set-contrast-ratio-white();

  .set-tone(@color);
}

.set-average(@colors) {
  // averages a list of colors
  // sets result to @average

  @iterations: length(@colors);

  .find-average(extract(@colors, 1), 1);

  .find-average(@color, @index) when (@index <= @iterations) {
    @this-color: extract(@colors, @index);
    @last-color: @color;
    @weight: 100% * (1/@index);
    @new-average: mix(@this-color, @last-color, @weight);

    .find-average(@new-average, @index + 1);
  }

  .find-average(@color, @index) when (default()) {
    @average: @color;
  }
}

.set-lumafix(@color; @compare: @base-color;) {
  // sets @lumafix to a version of @color with luma similar to @compare

  @iterations: 12;

  .settings() when (luma(@color) > luma(@compare)) {
    @tone: black;
  }

  .settings() when (luma(@compare) >= luma(@color)) {
    @tone: white;
  }

  .lumafix(@color-to-fix, @compare, @index) when (@index <= @iterations)
                                      and (luma(@color-to-fix) < luma(@compare))
                                      and (@tone = white) {
    @new-color: lighten(@color-to-fix, .5%*@index);
    .lumafix(@new-color, @compare, @index + 1);
  }

  .lumafix(@color-to-fix, @compare, @index) when (@index <= @iterations)
                                      and (luma(@color-to-fix) > luma(@compare))
                                      and (@tone = black) {
    @new-color: darken(@color-to-fix, 2%);
    .lumafix(@new-color, @compare, @index + 1);
  }

  .lumafix(@color-to-fix, @compare, @index) when (default()) {
    @lumafix: @color-to-fix;
  }

  .settings();
  .lumafix(@color, @compare, 1);
}

.no-user-select() {
  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}

.hide() {
  &:extend(.hide);
}

.clearfix() {
  &:extend(.clearfix all);
}

.max-width() {
  &:extend(.max-width);
}

.margin-bottom() {
  &:extend(.margin-bottom);
}

.border-radius() {
  &:extend(.border-radius);
}

.padding() {
  &:extend(.padding);
}

.semantic-padding() {
  .semantic-classes({
    &:extend(.padding);
  });
}
