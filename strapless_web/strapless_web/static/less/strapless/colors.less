// configurables

@base-color: #CADFE6;
//@base-color: #09737B;
@base-color-wheel:  ebb;

// semantic colors, themed.
// TODO: use contrast to pick candidates here instead of this awkward sat/lit dance

@action:    @s-action;
@reaction:  @s-reaction;
@info:      hsl(hue(@s-info); @sat; @lit);
@success:   hsl(hue(@s-success); (saturation(@s-success) + @sat)/2.0; lightness(average(@s-success; @base-color;)));
@failure:   hsl(hue(@s-failure); (saturation(@s-failure) + @sat)/1.8; lightness(average(@s-failure; @base-color;)));
@warning:   hsl(hue(@s-warning); (saturation(@s-warning) + @sat)/1.7; lightness(average(@s-warning; @base-color;)));
@default: @color1;

@s-action: @color1b;
@s-reaction: @color2b;
@s-info: #5bc0de;
@s-success: #5cb85c;
@s-failure: #d0534f;
@s-warning: #f0ad4e;

@semantic-colors:   action,
                    reaction,
                    info,
                    warning,
                    success,
                    failure,
                    default;

.make-colors();

.make-colors(@color: @base-color; @wheel: @base-color-wheel) {

  .configure-scheme-type(@color);
  .load-color-wheels();
  .make-main-colors(@color; @wheel);
  .load-subcolor-bases();
  .make-subcolors(@scheme-type);
  .load-gray-bases(@color);
  .make-grays(@color);

  .configure-scheme-type(@color) {
    // sets @scheme-type to dark, medium or light depending on color given
    @scheme-type-base: unit(ceil(luma(@color)*3/100));
    @scheme-types: dark, medium, light;
    @scheme-type: extract(@scheme-types, @scheme-type-base);
  }

  .load-color-wheels() {
    @complement: 180deg;
    @triadic-pair: 120deg;
    @accent: 45deg;
    @analog: 15deg;

    @accented:        @complement,
                      @accent,
                      -@accent;

    @complementary:   @complement,
                      @analog,
                      @complement + @analog;
                      

    @complementary-b: @complement,
                      -@analog,
                      @complement - @analog;

    @triadic:         @triadic-pair,
                      -@triadic-pair,
                      -@analog;

    @triadic-b:       -@triadic-pair,
                      @triadic-pair,
                      @analog;

    @tetradic:        @complement,
                      @accent,
                      @complement + @accent;
                      
    @tetradic-b:      @complement,
                      -@accent,
                      @complement - @accent;

    @square:          @complement,
                      @complement/2,
                      -@complement/2;

    @ebb:             @complement + @analog,
                      @analog,
                      @accent;

    @flow:            @complement - @analog,
                      -@analog,
                      -@accent;

    @monochromatic:   @accent,
                      @analog/2,
                      -@analog/2;

    @monochromatic-b: -@accent,
                      @analog/2,
                      -@analog/2;
  }

  .make-main-colors(@color; @wheel) {
    // turn the wheel into its variable form and use it to spin other main colors
    @wheel-var: @@wheel;
    @color1: @color;
    @color2: spin(@color, extract(@wheel-var, 1));
    @color3: spin(@color, extract(@wheel-var, 2));
    @color4: spin(@color, extract(@wheel-var, 3));  
  }

  .load-subcolor-bases() {
    .load-subcolor-bases-a();
    .load-subcolor-bases-b();
    .load-subcolor-bases-c();
  }

  .load-subcolor-bases-a() {
    // contrast two nearby analogs against black to get the lighter version
    @spin: @analog;
    @contrast: green;
    @color1a-base: contrast(@contrast; spin(@color1, @spin/2); spin(@color1, -@spin/2));
    @color2a-base: contrast(@contrast; spin(@color2, @spin); spin(@color2, -@spin));
    @color3a-base: contrast(@contrast; spin(@color3, @spin); spin(@color3, -@spin));
    @color4a-base: contrast(@contrast; spin(@color4, @spin); spin(@color4, -@spin));
  }

  .load-subcolor-bases-b() {
    // contrast two nearby accents against the color itself
    @spin: @accent;
    @color1b-base: contrast(@color1; spin(@color1, @spin); spin(@color1, -@spin));
    @color2b-base: contrast(@color2; spin(@color2, @spin); spin(@color2, -@spin));
    @color3b-base: contrast(@color3; spin(@color3, @spin); spin(@color3, -@spin));
    @color4b-base: contrast(@color4; spin(@color4, @spin); spin(@color4, -@spin));
  }

  .load-subcolor-bases-c() {
    // contrast two nearby analogs against white to get the darker version
    @spin: @analog;
    @contrast: orange;
    @color1c-base: contrast(@contrast; spin(@color1, @spin/2); spin(@color1, -@spin/2));
    @color2c-base: contrast(@contrast; spin(@color2, @spin); spin(@color2, -@spin));
    @color3c-base: contrast(@contrast; spin(@color3, @spin); spin(@color3, -@spin));
    @color4c-base: contrast(@contrast; spin(@color4, @spin); spin(@color4, -@spin));
  }

  .make-subcolors(@scheme-type: medium) {
    .make-subcolors-a(@scheme-type);
    .make-subcolors-b(@scheme-type);
    .make-subcolors-c(@scheme-type);
  }

  .make-subcolors-a(@scheme) {
    // a is lighter
    @lighten-by: 10%;
    @color1a: lighten(@color1a-base, @lighten-by);
    @color2a: lighten(@color2a-base, @lighten-by);
    @color3a: lighten(@color3a-base, @lighten-by);
    @color4a: lighten(@color4a-base, @lighten-by);
  }

  .make-subcolors-b(@scheme) {
    // b is just the base (which is an accent), no lightness changes
    @color1b: @color1b-base;
    @color2b: @color2b-base;
    @color3b: @color3b-base;
    @color4b: @color4b-base;
  }

  .make-subcolors-c(@scheme) {
    // c is darker
    @darken-by: 10%;
    @color1c: darken(@color1c-base, @darken-by);
    @color2c: darken(@color2c-base, @darken-by);
    @color3c: darken(@color3c-base, @darken-by);
    @color4c: darken(@color4c-base, @darken-by);
  }

  .make-subcolors-a(@scheme) when (@scheme = light) {
    @lighten-by: 3%;
    @color1a: lighten(@color1a-base, @lighten-by);
    @color2a: lighten(@color2a-base, @lighten-by);
    @color3a: lighten(@color3a-base, @lighten-by);
    @color4a: lighten(@color4a-base, @lighten-by);
  }

  .make-subcolors-b(@scheme) when (@scheme = light) {
    @darken-by: 4%;
    @color1b: darken(@color1b-base, @darken-by);
    @color2b: darken(@color2b-base, @darken-by);
    @color3b: darken(@color3b-base, @darken-by);
    @color4b: darken(@color4b-base, @darken-by);
  }

  .make-subcolors-c(@scheme) when (@scheme = light) {
    @darken-by: 15%;
    @color1c: darken(@color1c-base, @darken-by);
    @color2c: darken(@color2c-base, @darken-by);
    @color3c: darken(@color3c-base, @darken-by);
    @color4c: darken(@color4c-base, @darken-by);
  }

  .make-subcolors-a(@scheme) when (@scheme = dark) {
    @lighten-by: 15%;
    @color1a: lighten(@color1a-base, @lighten-by);
    @color2a: lighten(@color2a-base, @lighten-by);
    @color3a: lighten(@color3a-base, @lighten-by);
    @color4a: lighten(@color4a-base, @lighten-by);
  }

  .make-subcolors-b(@scheme) when (@scheme = dark) {
    @lighten-by: 4%;
    @color1b: lighten(@color1b-base, @lighten-by);
    @color2b: lighten(@color2b-base, @lighten-by);
    @color3b: lighten(@color3b-base, @lighten-by);
    @color4b: lighten(@color4b-base, @lighten-by);
  }

  .make-subcolors-c(@scheme) when (@scheme = dark) {
    @darken-by: 3%;
    @color1c: darken(@color1c-base, @darken-by);
    @color2c: darken(@color2c-base, @darken-by);
    @color3c: darken(@color3c-base, @darken-by);
    @color4c: darken(@color4c-base, @darken-by);
  }

  .load-gray-bases(@color) {
    @gray-base: desaturate(@color; 85%);
    @gray-step: 7%;

    @gray-bases:  @gray-lightest-base,
                  @gray-lighter-base,
                  @gray-light-base,
                  @gray-base,
                  @gray-dark-base,
                  @gray-darker-base,
                  @gray-darkest-base,
                  darken(@gray-darkest-base, 3%); // placeholder for overflow

    @gray-light-base:             lighten(@gray-base; @gray-step);
    @gray-lighter-base:           lighten(@gray-base; @gray-step * 2);
    @gray-lightest-base:          lighten(@gray-base; @gray-step * 3);

    @gray-dark-base:              darken(@gray-base; @gray-step);
    @gray-darker-base:            darken(@gray-base; @gray-step * 2);
    @gray-darkest-base:           darken(@gray-base; @gray-step * 3);
  }

  .make-grays(@color) {
    
    .load-gray-bases(@color);

    @gray-lighter:      extract(@gray-bases; 0 + @scheme-type-base);
    @gray-light:        extract(@gray-bases; 1 + @scheme-type-base);
    @gray:              extract(@gray-bases; 2 + @scheme-type-base);
    @gray-dark:         extract(@gray-bases; 3 + @scheme-type-base);
    @gray-darker:       extract(@gray-bases; 4 + @scheme-type-base);
  }
}