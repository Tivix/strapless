// base configurables

// make- makes variables intended for use externally
// load- makes variables too, but ones that we'd like not to be available outside that scope

// (unfortunately they work identically now and all end up in the global scope)


     
.make-colors(@base-color; accented);

@base-color: #88BA56;
@color-wheel-type:  monochromatic;

.make-colors(@color; @wheel) {

  .configure-scheme-type(@color);
  .load-color-wheel-types();
  .make-main-colors(@color; @wheel);
  .load-subcolor-bases();
  
  .make-subcolors(@scheme-type);
  .make-grays(@color);

  .load-subcolor-bases() {
    @color1a-base: contrast(black; spin(@color1, 5); spin(@color1, -5));
    @color1b-base: contrast(@color1; spin(@color1, @accent); spin(@color1, -@accent));
    @color1c-base: contrast(white; spin(@color1, 5); spin(@color1, -5));

    @color2a-base: contrast(black; spin(@color2, 10); spin(@color2, -10));
    @color2b-base: contrast(@color2; spin(@color2, @accent); spin(@color2, -@accent));
    @color2c-base: contrast(white; spin(@color2, 10); spin(@color2, -10));

    @color3a-base: contrast(black; spin(@color3, 10); spin(@color3, -10));
    @color3b-base: contrast(@color3; spin(@color3, @accent); spin(@color3, -@accent));
    @color3c-base: contrast(white; spin(@color3, 10); spin(@color3, -10));

    @color4a-base: contrast(black; spin(@color4, 10); spin(@color4, -10));
    @color4b-base: contrast(@color4; spin(@color4, @accent); spin(@color4, -@accent));
    @color4c-base: contrast(white; spin(@color4, 10); spin(@color4, -10));
  }

  .load-color-wheel-types() {
    @complement: 180deg;
    @triadic-pair: 120deg;
    @accent: 45deg;
    @analog: 15deg;

    @accented:        @complement,
                      @accent,
                      -@accent;

    @complementary:   @complement,
                      @analog,
                      @complement + @analog;
                      

    @complementary-b: @complement,
                      -@analog,
                      @complement - @analog;

    @triadic:         @triadic-pair,
                      -@triadic-pair,
                      -@analog;

    @triadic-b:       -@triadic-pair,
                      @triadic-pair,
                      @analog;

    @tetradic:        @complement,
                      @accent,
                      @complement + @accent;
                      
    @tetradic-b:      @complement,
                      -@accent,
                      @complement - @accent;

    @square:          @complement,
                      @complement/2,
                      -@complement/2;

    @ebb:             @complement + @analog,
                      @analog,
                      @accent;

    @flow:            @complement - @analog,
                      -@analog,
                      -@accent;

    @monochromatic:   @accent,
                      @analog/2,
                      -@analog/2;

    @monochromatic-b: -@accent,
                      @analog/2,
                      -@analog/2;
  }

  .make-main-colors(@color; @wheel) {
    @wheel-var: @@wheel;
    @color1: @color;
    @color2: spin(@color, extract(@wheel-var, 1));
    @color3: spin(@color, extract(@wheel-var, 2));
    @color4: spin(@color, extract(@wheel-var, 3));  
  }

  .make-subcolors(@type: medium) {
    @color1a: lighten(@color1a-base, 10%);
    @color1b: @color1b-base;
    @color1c: darken(@color1c-base, 10%);

    @color2a: lighten(@color2a-base, 10%);
    @color2b: @color2b-base;
    @color2c: darken(@color2c-base, 10%);

    @color3a: lighten(@color3a-base, 10%);
    @color3b: @color3b-base;
    @color3c: darken(@color3c-base, 10%);

    @color4a: lighten(@color4a-base, 10%);
    @color4b: @color4b-base;
    @color4c: darken(@color4c-base, 10%);
  }

  .make-subcolors(@type) when (@type = light) {
    @color1a: lighten(@color1a-base, 3%);
    @color1b: darken(@color1b-base, 4%);
    @color1c: darken(@color1c-base, 12.5%);

    @color2a: lighten(@color2a-base, 3%);
    @color2b: darken(@color2b-base, 4%);
    @color2c: darken(@color2c-base, 12.5%);

    @color3a: lighten(@color3a-base, 3%);
    @color3b: darken(@color3b-base, 4%);
    @color3c: darken(@color3c-base, 12.5%);

    @color4a: lighten(@color4a-base, 3%);
    @color4b: darken(@color4b-base, 4%);
    @color4c: darken(@color4c-base, 12.5%);
  }

  .make-subcolors(@type) when (@type = dark) {
    @color1a: lighten(@color1a-base, 15%);
    @color1b: lighten(@color1b-base, 5%);
    @color1c: darken(@color1c-base, 5%);

    @color2a: lighten(@color2a-base, 15%);
    @color2b: lighten(@color2b-base, 5%);
    @color2c: darken(@color2c-base, 5%);

    @color3a: lighten(@color3a-base, 15%);
    @color3b: lighten(@color3b-base, 5%);
    @color3c: darken(@color3c-base, 5%);

    @color4a: lighten(@color4a-base, 15%);
    @color4b: lighten(@color4b-base, 5%);
    @color4c: darken(@color4c-base, 5%);
  }

  .make-grays(@color) {
    
    .configure-scheme-type(@color);
    .load-gray-bases();

    .load-gray-bases() {
      @gray-base:                   desaturate(@color; 80%);
      @gray-step: 9%;

      @gray-bases:  @gray-lightest-base,
                    @gray-lighter-base,
                    @gray-light-base,
                    @gray-base,
                    @gray-dark-base,
                    @gray-darker-base,
                    @gray-darkest-base,
                    darken(@gray-darkest-base, 3%); // placeholder for overflow

      @gray-light-base:             lighten(@gray-base; @gray-step);
      @gray-lighter-base:           lighten(@gray-base; @gray-step * 2);
      @gray-lightest-base:          lighten(@gray-base; @gray-step * 3);

      @gray-dark-base:              darken(@gray-base; @gray-step);
      @gray-darker-base:            darken(@gray-base; @gray-step * 2);
      @gray-darkest-base:           darken(@gray-base; @gray-step * 3);
    }

    @gray-lighter:      extract(@gray-bases; 0 + @scheme-type-base);
    @gray-light:        extract(@gray-bases; 1 + @scheme-type-base);
    @gray:              extract(@gray-bases; 2 + @scheme-type-base);
    @gray-dark:         extract(@gray-bases; 3 + @scheme-type-base);
    @gray-darker:       extract(@gray-bases; 4 + @scheme-type-base);
  }
}

.configure-scheme-type(@color) {
  @scheme-type-base: unit(ceil(luma(@color)*3/100));
  @scheme-types: dark, medium, light;
  @scheme-type: extract(@scheme-types, @scheme-type-base);
}

// semantic colors, themed.
// TODO: use contrast to pick candidates here instead of this awkward sat/lit dance

@action:		@s-action;
@reaction:  @s-reaction;
@info:   		hsl(hue(@s-info); @sat; @lit);
@success:		hsl(hue(@s-success); (saturation(@s-success) + @sat)/2.0; lightness(average(@s-success; @base-color;)));
@failure: 	hsl(hue(@s-failure); (saturation(@s-failure) + @sat)/1.8; lightness(average(@s-failure; @base-color;)));
@warning:		hsl(hue(@s-warning); (saturation(@s-warning) + @sat)/1.7; lightness(average(@s-warning; @base-color;)));
@default: @color4;

@s-action: @color1;
@s-reaction: @color2;
@s-info: #5bc0de;
@s-success: #5cb85c;
@s-failure: #d0534f;
@s-warning: #f0ad4e;

@semantic-colors:   action,
                    reaction,
                    info,
                    warning,
                    success,
                    failure,
                    default;

