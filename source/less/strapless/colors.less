.make-palette();

.make-palette(@color: @base-color; @wheel: @base-color-wheel) {
  .load-scheme-type(@color);
  .load-color-wheels();
  .make-colors(@color; @wheel; @scheme-type);
  .load-gray-bases(@color);
  .make-grays(@color);
  .load-action-colors(@color1, @color1, @color3b);
  .load-reaction-colors(@color2, @color2b, @color4);
}

.make-palette(@color: @base-color; @wheel: @base-color-wheel) when (saturation(@color) = 0) {
  // for grays, set up working color2, 3 and 4 and then reinforce gray color1
  .make-palette(average(@color, #57A0EE); @wheel); // @color is always gray so this desaturates
  @color1: @color;
  @color1a: greyscale(@gray-light);
  @color1b: greyscale(@gray);
  @color1c: greyscale(@gray-dark); 
}

.make-palette(@color: @base-color; @wheel: @base-color-wheel) when (luma(@color) > 98%) {
  .make-palette(darken(@color, 3%); @wheel);
  @color1: @color;
}

.make-palette(@color: @base-color; @wheel: @base-color-wheel) when (luma(@color) < 2%) {
  .make-palette(lighten(@color, 3%); @wheel);
}

.load-scheme-type(@color) {
  // sets @scheme-type to dark, medium or light depending on color given
  @scheme-type-base: unit(ceil(luma(@color)*3/100));
  @scheme-types: dark, medium, light;
  @scheme-type: extract(@scheme-types, @scheme-type-base);
}

.load-color-wheels() {
  // color wheel position conventions

  @complement: 180deg;
  @triadic-pair: 120deg;
  @accent: 45deg;
  @analog: 15deg;

  // color wheels
  // these (like everything else) eventually bubble up to global scope

  @accented:        @complement,
                    @accent,
                    -@accent;

  @complementary:   @complement,
                    @analog,
                    @complement + @analog;

  @complementary-b: @complement,
                    -@analog,
                    @complement - @analog;

  @triadic:         -@triadic-pair,
                    @triadic-pair,
                    @analog;

  @triadic-b:       @triadic-pair,
                    -@triadic-pair,
                    -@analog;

  @tetradic:        @complement,
                    @accent,
                    @complement + @accent;

  @tetradic-b:      @complement,
                    -@accent,
                    @complement - @accent;

  @square:          @complement,
                    @complement/2,
                    -@complement/2;

  @ebb:             @complement + @analog,
                    @analog,
                    @accent;

  @flow:            @complement - @analog,
                    -@analog,
                    -@accent;

  @monochromatic:   @accent,
                    @analog/2,
                    -@analog/2;

  @monochromatic-b: -@accent,
                    @analog/2,
                    -@analog/2;
}

.make-colors(@color; @wheel; @scheme-type) {
  // turn the wheel into its variable form and use it to spin other main colors

  @wheel-var: @@wheel;
  @color1: @color;
  @color2: spin(@color, extract(@wheel-var, 1));
  @color3: spin(@color, extract(@wheel-var, 2));
  @color4: spin(@color, extract(@wheel-var, 3));

  @a-by: 10%;
  @c-by: 10%;
  @ceiling: white;
  @floor: black;
  @compare: @color;

  // color a is a lighter analog

  @color1a: contrast(@ceiling; spin(lighten(@color1, @a-by), @analog); spin(lighten(@color1, @a-by), -@analog); 50%);
  @color2a: contrast(@ceiling; spin(lighten(@color2, @a-by), @analog); spin(lighten(@color2, @a-by), -@analog); 50%);
  @color3a: contrast(@ceiling; spin(lighten(@color3, @a-by), @analog); spin(lighten(@color3, @a-by), -@analog); 50%);
  @color4a: contrast(@ceiling; spin(lighten(@color4, @a-by), @analog); spin(lighten(@color4, @a-by), -@analog); 50%);

  // color b is an accent

  @color1b: contrast(@compare; spin(@color1, @accent); spin(@color1, -@accent); 50%);
  @color2b: contrast(@compare; spin(@color2, @accent); spin(@color2, -@accent); 50%);
  @color3b: contrast(@compare; spin(@color3, @accent); spin(@color3, -@accent); 50%);
  @color4b: contrast(@compare; spin(@color4, @accent); spin(@color4, -@accent); 50%);

  // color c is a darker analog

  @color1c: contrast(@floor; spin(darken(@color1, @c-by), @analog); spin(darken(@color1, @c-by), -@analog); 50%);
  @color2c: contrast(@floor; spin(darken(@color2, @c-by), @analog); spin(darken(@color2, @c-by), -@analog); 50%);
  @color3c: contrast(@floor; spin(darken(@color3, @c-by), @analog); spin(darken(@color3, @c-by), -@analog); 50%);
  @color4c: contrast(@floor; spin(darken(@color4, @c-by), @analog); spin(darken(@color4, @c-by), -@analog); 50%);
}

.make-colors(@color; @wheel; @scheme-type) when (@scheme-type = light) {

  @wheel-var: @@wheel;
  @color1: @color;
  @color2: spin(@color, extract(@wheel-var, 1));
  @color3: spin(@color, extract(@wheel-var, 2));
  @color4: spin(@color, extract(@wheel-var, 3));

  @a-by: 4%;
  @c-by: 8%;
  @ceiling: white;
  @floor: #515151;
  @compare: @color;

  // color a is a lighter analog

  @color1a: contrast(@ceiling; spin(lighten(@color1, @a-by), @analog); spin(lighten(@color1, @a-by), -@analog); 50%;);
  @color2a: contrast(@ceiling; spin(lighten(@color2, @a-by), @analog); spin(lighten(@color2, @a-by), -@analog); 50%;);
  @color3a: contrast(@ceiling; spin(lighten(@color3, @a-by), @analog); spin(lighten(@color3, @a-by), -@analog); 50%;);
  @color4a: contrast(@ceiling; spin(lighten(@color4, @a-by), @analog); spin(lighten(@color4, @a-by), -@analog); 50%;);

  // color b is an accent

  @color1b: contrast(@compare; spin(@color1, @accent); spin(@color1, -@accent/2); 50%;);
  @color2b: contrast(@compare; spin(@color2, @accent); spin(@color2, -@accent/2); 50%;);
  @color3b: contrast(@compare; spin(@color3, @accent); spin(@color3, -@accent/2); 50%;);
  @color4b: contrast(@compare; spin(@color4, @accent); spin(@color4, -@accent/2); 50%;);

  // color c is a darker analog

  @color1c: contrast(@floor; spin(darken(@color1, @c-by), @analog); spin(darken(@color1, @c-by), -@analog); 50%;);
  @color2c: contrast(@floor; spin(darken(@color2, @c-by), @analog); spin(darken(@color2, @c-by), -@analog); 50%;);
  @color3c: contrast(@floor; spin(darken(@color3, @c-by), @analog); spin(darken(@color3, @c-by), -@analog); 50%;);
  @color4c: contrast(@floor; spin(darken(@color4, @c-by), @analog); spin(darken(@color4, @c-by), -@analog); 50%;);
}

.make-colors(@color; @wheel; @scheme-type) when (@scheme-type = dark) {

  @wheel-var: @@wheel;
  @color1: @color;
  @color2: spin(@color, extract(@wheel-var, 1));
  @color3: spin(@color, extract(@wheel-var, 2));
  @color4: spin(@color, extract(@wheel-var, 3));

  @a-by: 12%;
  @c-by: 8%;
  @ceiling: #515151;
  @floor: black;
  @compare: @color;

  // color a is a lighter analog

  @color1a: contrast(@ceiling; spin(lighten(@color1, @a-by), @analog); spin(lighten(@color1, @a-by), -@analog); 50%);
  @color2a: contrast(@ceiling; spin(lighten(@color2, @a-by), @analog); spin(lighten(@color2, @a-by), -@analog); 50%);
  @color3a: contrast(@ceiling; spin(lighten(@color3, @a-by), @analog); spin(lighten(@color3, @a-by), -@analog); 50%);
  @color4a: contrast(@ceiling; spin(lighten(@color4, @a-by), @analog); spin(lighten(@color4, @a-by), -@analog); 50%);

  // color b is an accent

  @color1b: contrast(@compare; spin(@color1, @accent); spin(@color1, -@accent); 50%);
  @color2b: contrast(@compare; spin(@color2, @accent); spin(@color2, -@accent); 50%);
  @color3b: contrast(@compare; spin(@color3, @accent); spin(@color3, -@accent); 50%);
  @color4b: contrast(@compare; spin(@color4, @accent); spin(@color4, -@accent); 50%);

  // color c is a darker analog

  @color1c: contrast(@floor; spin(darken(@color1, @c-by), @analog); spin(darken(@color1, @c-by), -@analog); 50%);
  @color2c: contrast(@floor; spin(darken(@color2, @c-by), @analog); spin(darken(@color2, @c-by), -@analog); 50%);
  @color3c: contrast(@floor; spin(darken(@color3, @c-by), @analog); spin(darken(@color3, @c-by), -@analog); 50%);
  @color4c: contrast(@floor; spin(darken(@color4, @c-by), @analog); spin(darken(@color4, @c-by), -@analog); 50%);
}

.load-gray-bases(@color) {
  @gray-base: mix(desaturate(@color, 80%), #515151, 75%);
  @gray-step: 12%;

  @gray-bases:  @gray-lightest-base,
                @gray-lighter-base,
                @gray-light-base,
                @gray-base,
                @gray-dark-base,
                @gray-darker-base,
                @gray-darkest-base,
                darken(@gray-darkest-base, 3%); // placeholder for overflow

  @gray-light-base:             lighten(@gray-base; @gray-step);
  @gray-lighter-base:           lighten(@gray-light-base; @gray-step);
  @gray-lightest-base:          lighten(@gray-lighter-base; @gray-step);

  @gray-dark-base:              darken(@gray-base; @gray-step);
  @gray-darker-base:            darken(@gray-dark-base; @gray-step);
  @gray-darkest-base:           darken(@gray-darker-base; @gray-step);
}

.make-grays(@color) {
  .load-gray-bases(@color);
  @gray-shift: @scheme-type-base;

  @gray-lighter:      extract(@gray-bases; 0 + @gray-shift);
  @gray-light:        extract(@gray-bases; 1 + @gray-shift);
  @gray:              extract(@gray-bases; 2 + @gray-shift);
  @gray-dark:         extract(@gray-bases; 3 + @gray-shift);
  @gray-darker:       extract(@gray-bases; 4 + @gray-shift);
}

.load-action-colors(@base: @base-color, @c1: @champion, @c2: @challenger) {

  @success-base: #51ad51;
  @info-base: #43a3e6;

  @info: average(@info-base, hsl(hue(@info-base), saturation(@base), lightness(@base)));
  @success: average(@success-base, hsl(hue(@success-base), saturation(@base), lightness(@base)));

  @action-sat: (saturation(@info) + saturation(@success))/2;
  @action-lit: (lightness(@info) + lightness(@success))/2;

  @r-values-s-c1: 2*(red(@c1) - red(@success))*(red(@c1) - red(@success));
  @g-values-s-c1: 4*(green(@c1) - green(@success))*(green(@c1) - green(@success));
  @b-values-s-c1: 3*(blue(@c1) - blue(@success))*(blue(@c1) - blue(@success));

  @r-values-s-c2: 2*(red(@c2) - red(@success))*(red(@c2) - red(@success));
  @g-values-s-c2: 4*(green(@c2) - green(@success))*(green(@c2) - green(@success));
  @b-values-s-c2: 3*(blue(@c2) - blue(@success))*(blue(@c2) - blue(@success));

  @d-c1-success: sqrt(@r-values-s-c1 + @g-values-s-c1 + @b-values-s-c1);
  @d-c2-success: sqrt(@r-values-s-c2 + @g-values-s-c2 + @b-values-s-c2);

  @r-values-i-c1: 2*(red(@c1) - red(@info))*(red(@c1) - red(@info));
  @g-values-i-c1: 4*(green(@c1) - green(@info))*(green(@c1) - green(@info));
  @b-values-i-c1: 3*(blue(@c1) - blue(@info))*(blue(@c1) - blue(@info));

  @r-values-i-c2: 2*(red(@c2) - red(@info))*(red(@c2) - red(@info));
  @g-values-i-c2: 4*(green(@c2) - green(@info))*(green(@c2) - green(@info));
  @b-values-i-c2: 3*(blue(@c2) - blue(@info))*(blue(@c2) - blue(@info));

  @d-c1-info: sqrt(@r-values-i-c1 + @g-values-i-c1 + @b-values-i-c1);
  @d-c2-info: sqrt(@r-values-i-c2 + @g-values-i-c2 + @b-values-i-c2);

  // if che champion is farther from success or info, the champion remains champion
  // challenger only wins if it is farther in terms of success sameness and info sameness

  .determine-action-winner(@d-c1-info, @d-c2-info, @d-c1-success, @d-c2-success);

  .sl-color-action:after {
    .contrast-text-against(@background);
    display: none;
  }

  .determine-action-winner(@d-c1-info, @d-c2-info, @d-c1-success, @d-c2-success) when (@d-c2-info > @d-c1-info) {
    @action: @c2;
    @action-base: hsl(hue(@c2), @action-sat, @action-lit);

    .sl-color-action:after {
      content: "c1 lost info";
      .colorize(@c1);
    }
  }

  .determine-action-winner(@d-c1-info, @d-c2-info, @d-c1-success, @d-c2-success) when (@d-c2-success > @d-c1-success) {
    @action: @c2;
    @action-base: hsl(hue(@c2), @action-sat, @action-lit);

    .sl-color-action:after {
      content: "c1 lost success";
      .colorize(@c1);
    }
  }

  .determine-action-winner(@d-c1-info, @d-c2-info, @d-c1-success, @d-c2-success) when (default()) {
    @action: @c1;
    @action-base: hsl(hue(@c1), @action-sat, @action-lit);

    .sl-color-action:after {
      content: "c2 lost";
      .colorize(@c2);
    }
  } 
}

.load-reaction-colors(@base: @base-color, @r1: @champion, @r2: @challenger) {

  @failure-base: #e11d1d;
  @warning-base: #ff6b23;
  
  @failure:   average(@failure-base, hsl(hue(@failure-base), saturation(@base), lightness(@base)));
  @warning:   average(@warning-base, hsl(hue(@warning-base), saturation(@base), lightness(@base)*1.2));

  @reaction-sat: (saturation(@warning) + saturation(@failure))/2;
  @reaction-lit: (lightness(@warning) + lightness(@failure))/2;

  @r-values-f-r1: 2*(red(@r1) - red(@failure))*(red(@r1) - red(@failure));
  @g-values-f-r1: 4*(green(@r1) - green(@failure))*(green(@r1) - green(@failure));
  @b-values-f-r1: 3*(blue(@r1) - blue(@failure))*(blue(@r1) - blue(@failure));

  @r-values-f-r2: 2*(red(@r2) - red(@failure))*(red(@r2) - red(@failure));
  @g-values-f-r2: 4*(green(@r2) - green(@failure))*(green(@r2) - green(@failure));
  @b-values-f-r2: 3*(blue(@r2) - blue(@failure))*(blue(@r2) - blue(@failure));

  @d-r1-failure: sqrt(@r-values-f-r1 + @g-values-f-r1 + @b-values-f-r1);
  @d-r2-failure: sqrt(@r-values-f-r2 + @g-values-f-r2 + @b-values-f-r2);

  @r-values-w-r1: 2*(red(@r1) - red(@warning))*(red(@r1) - red(@warning));
  @g-values-w-r1: 4*(green(@r1) - green(@warning))*(green(@r1) - green(@warning));
  @b-values-w-r1: 3*(blue(@r1) - blue(@warning))*(blue(@r1) - blue(@warning));

  @r-values-w-r2: 2*(red(@r2) - red(@warning))*(red(@r2) - red(@warning));
  @g-values-w-r2: 4*(green(@r2) - green(@warning))*(green(@r2) - green(@warning));
  @b-values-w-r2: 3*(blue(@r2) - blue(@warning))*(blue(@r2) - blue(@warning));

  @d-r1-warning: sqrt(@r-values-w-r1 + @g-values-w-r1 + @b-values-w-r1);
  @d-r2-warning: sqrt(@r-values-w-r2 + @g-values-w-r2 + @b-values-w-r2);

  // if che champion is farther from failure or warning, the champion remains champion
  // challenger only wins if it is farther in terms of failure sameness and warning sameness

  .determine-reaction-winner(@d-r1-failure, @d-r2-failure, @d-r1-warning, @d-r2-warning);

  .determine-reaction-winner(@d-r1-failure, @d-r2-failure, @d-r1-warning, @d-r2-warning) when (@d-r1-warning > @d-r2-warning) {
    @reaction: @r1;
    @reaction-base: hsl(hue(@r2), @reaction-sat, @reaction-lit);
  }

  .determine-reaction-winner(@d-r1-failure, @d-r2-failure, @d-r1-warning, @d-r2-warning) when (@d-r1-failure > @d-r2-failure) {
    @reaction: @r1;
    @reaction-base: hsl(hue(@r2), @reaction-sat, @reaction-lit);
  }

  .determine-reaction-winner(@d-r1-failure, @d-r2-failure, @d-r1-warning, @d-r2-warning) when (default()) {
    @reaction: @r2;
    @reaction-base: hsl(hue(@r2), @reaction-sat, @reaction-lit);
  }
}
