// color constants

@complement: 180deg;
@triadic-pair: 120deg;
@accent: 45deg;
@analog: 15deg;

// color wheels

@accented:        @complement,
                  @accent,
                  -@accent;

@complementary:   @complement,
                  @analog,
                  @complement + @analog;

@complementary-b: @complement,
                  -@analog,
                  @complement - @analog;

@triadic:         -@triadic-pair,
                  @triadic-pair,
                  @analog;

@triadic-b:       -@triadic-pair,
                  @triadic-pair,
                  -@analog;

@tetradic:        @complement,
                  @accent,
                  @complement + @accent;

@tetradic-b:      @complement,
                  -@accent,
                  @complement - @accent;

@square:          @complement,
                  -@complement/2,
                  @complement/2;

@ebb:             @complement + @analog,
                  @analog,
                  @accent;

@flow:            @complement - @analog,
                  -@analog,
                  -@accent;

@monochromatic:   @accent/2,
                  @analog/2,
                  -@analog/2;

@monochromatic-b: -@accent/2,
                  @analog/2,
                  -@analog/2;

.make-palette(@base-color, @base-color-wheel);

.make-palette(@color; @wheel) {
  // make all variables for a color palette
  .set-scheme-type(@color);
  .make-color1(@color);
  .make-color2(@color; @wheel);
  .make-color3(@color; @wheel);
  .make-color4(@color; @wheel);
  .make-subcolors(@color1; @color2; @color3; @color4; @scheme-type);
  .make-grays(@color; @scheme-type);
  .make-semantic-colors();
}

.make-palette(@color: @base-color; @wheel: @base-color-wheel) when (saturation(@color) < 1.5%) {
  // for grays, set up working color2, 3 and 4 and then reinforce gray color1
  @standin-base: #D76224;
  .set-lumafix(@standin-base);
  .make-palette(@lumafix; @wheel);
  @color1: @base-color;
  .set-a-color(@base-color);
  .set-b-color(@base-color);
  .set-c-color(@base-color);
  @color1a: desaturate(@a-color, 100% - saturation(@color));
  @color1b: desaturate(@b-color, 100% - saturation(@color));
  @color1c: desaturate(@c-color, 100% - saturation(@color));
  @warning: @warning-base;
  @failure: @failure-base;
  @info: @info-base;
}

.set-scheme-type(@color) {
  // set @scheme-type to light, medium or dark

  .set-contrast-ratio-black() {
    .set-contrast-ratio(@color, black);
    @contrast-ratio-black: @contrast-ratio;
  }

  .set-contrast-ratio-white() {
    .set-contrast-ratio(@color, white);
    @contrast-ratio-white: @contrast-ratio;
  }

  .set-contrast-ratio-black();
  .set-contrast-ratio-white();

  .set-scheme-type() when (@contrast-ratio-black > 7) {
    @scheme-type: light;
  }

  .set-scheme-type() when (@contrast-ratio-white > 7) {
    @scheme-type: dark;
  }

  .set-scheme-type() when (default()) {
    @scheme-type: medium;
  }
  .set-scheme-type();
}


.set-a-color(@color, @compare: @color) {

  // a lighter version of the color
  // @color1a, @color3a etc are examples of a-colors

  @iterations: 10;

  .settings() when (@scheme-type = light) {
    @contrast-standard: 1.1;
    @initial-lighten: 1%;
  }

  .settings() when (@scheme-type = dark) {
    @contrast-standard: 1.1;
    @initial-lighten: 2.5%;
  }

  .settings() when (default()) {
    @contrast-standard: 1.25;
    @initial-lighten: 5%;
  }

  .set-a(@a, @contrast-ratio, @index) when (@index <= @iterations)
                                       and (@contrast-ratio < @contrast-standard)
                                       and (luma(@a) < 90%) {
    // loop through this until @contrast-standard is met
    @new-a: lighten(@a, 3.5%);
    .set-contrast-ratio(@color, @new-a);
    .set-a(@new-a, @contrast-ratio, @index + 1);
  }

  .set-a(@a, @contrast-ratio, @index) when (default()) {
    // set @a-color when conditions are finally met (or iterations run out)
    @a-color: @a;
  }

  // load settings
  .settings();

  // grab a couple near analogs and figure out which is closer
  .set-closer-farther(@compare; spin(@color, @analog/2); spin(@color, -@analog/2));

  // use the closer color as base for a-color
  .set-a(lighten(@closer, @initial-lighten), 1, 1);
}

.set-b-color(@color; @compare: @base-color; @nearness: @analog;) {

  // a similar luma alternate

  // grab both nearby analogs
  @b1: spin(@color, @nearness);
  @b2: spin(@color, -@nearness);

  // use whichever is closer to the original
  .set-closer-farther(@color; @b1; @b2;);
  @b-base: @closer;

  // adjust b's luma to match
  .set-lumafix(@b-base; @color;);
  @b-color: @lumafix;
}

.set-c-color(@color, @compare: @color, @scheme: @scheme-type) {

  @iterations: 10;

  // a darker version of the color

  .settings() when (@scheme = light) {
    @contrast-standard: 1.1;
    @initial-darken: 1%;
  }

  .settings() when (@scheme = dark) {
    @contrast-standard: 1.1;
    @initial-darken: 2.5%;
  }

  .settings() when (default()) {
    @contrast-standard: 1.25;
    @initial-darken: 5%;
  }

  .set-c(@c, @contrast-ratio, @index) when (@index <= @iterations)
                                       and (@contrast-ratio < @contrast-standard) {
    @new-c: darken(@c, 2%);
    .set-contrast-ratio(@color, @new-c);
    .set-c(@new-c, @contrast-ratio, @index + 1);
  }

  .set-c(@c, @contrast-ratio, @index) when (default()) {
    @c-color: @c;
  }

  @initial-c: darken(@color, @initial-darken);

  .settings();
  .set-contrast-ratio(@color, @initial-c);
  .set-closer-farther(@compare; spin(@initial-c, @analog/2); spin(@initial-c, -@analog/2));
  .set-c(@initial-c, @contrast-ratio, 1);
}

.make-color1(@color) {
  @color1: @color;
}

.make-color2(@color; @wheel) {
  .set-lumafix(spin(@color, extract(@wheel, 1)););
  @color2: @lumafix;
}

.make-color3(@color; @wheel) {
  .set-lumafix(spin(@color, extract(@wheel, 2)););
  @color3: @lumafix;
}

.make-color4(@color; @wheel) {
  .set-lumafix(spin(@color, extract(@wheel, 3)););
  @color4: @lumafix;
}

.make-subcolors(@c1; @c2; @c3; @c4; @scheme-type) {

  .make-color1a() {
    .set-a-color(@c1);
    @color1a: @a-color;
  }.make-color1a();

  .make-color1b() {
    .set-b-color(@c1);
    @color1b: @b-color;
  }.make-color1b();

  .make-color1c() {
    .set-c-color(@c1);
    @color1c: @c-color;
  }.make-color1c();

  .make-color2a() {
    .set-a-color(@c2);
    .set-lumafix(@a-color; @color1a;);
    @color2a: @lumafix;
  }.make-color2a();

  .make-color2b() {
    .set-b-color(@c2);
    @color2b: @b-color;
  }.make-color2b();

  .make-color2c() {
    .set-c-color(@c2);
    .set-lumafix(@c-color; @color1c;);
    @color2c: @lumafix;
  }.make-color2c();

  .make-color3a() {
    .set-a-color(@c3);
    .set-lumafix(@a-color; @color1a;);
    @color3a: @lumafix;
  }.make-color3a();

  .make-color3b() {
    .set-b-color(@c3);
    @color3b: @b-color;
  }.make-color3b();

  .make-color3c() {
    .set-c-color(@c3);
    .set-lumafix(@c-color; @color1c;);
    @color3c: @lumafix;
  }.make-color3c();

  .make-color4a() {
    .set-a-color(@c4);
    .set-lumafix(@a-color; @color1a;);
    @color4a: @lumafix;
  }.make-color4a();

  .make-color4b() {
    .set-b-color(@c4);
    @color4b: @b-color;
  }.make-color4b();

  .make-color4c() {
    .set-c-color(@c4);
    .set-lumafix(@c-color; @color1c;);
    @color4c: @lumafix;
  }.make-color4c();
}

.make-semantic-colors() {

  .set-action-midpoint() {
    @action-midpoint-base: average(@success-base, @info-base);
    .set-lumafix(@action-midpoint-base);
    @action-midpoint: @lumafix;
  }

  .set-reaction-midpoint() {
    @reaction-midpoint-base: average(@warning-base, @failure-base);
    .set-lumafix(@reaction-midpoint-base);
    @reaction-midpoint: @lumafix;
  }

  .set-action-midpoint();
  .set-reaction-midpoint();

  .set-info() {
    .set-lumafix(@info-base; @base-color;);
    @info: mix(@lumafix, @info-base, 75%);
  }

  .set-warning() {
    .set-lumafix(@warning-base; @base-color;);
    @warning: mix(@lumafix, @warning-base, 35%);
  }

  .set-success() {
    .set-lumafix(@success-base; @base-color;);
    @success: mix(@lumafix, @success-base, 50%);
  }

  .set-failure() {
    .set-lumafix(@failure-base; @base-color;);
    @failure: mix(@lumafix, @failure-base, 20%);
  }

  .set-action() {
    .set-closer-farther(@action-midpoint, @color1b, @color3);
    .set-average(@info, @warning, @failure, @success;);
    .set-lumafix(@closer, @average);
    @action: @lumafix;
  }

  .set-reaction() {
    .set-closer-farther(@reaction-midpoint, @color2, @color4);
    .set-average(@info, @warning, @failure, @success;);
    .set-lumafix(@closer, @average);
    @reaction: @lumafix;
  }

  .set-info();
  .set-warning();
  .set-success();
  .set-failure();
  .set-action();
  .set-reaction();
}

.make-grays(@color, @scheme-type) {
  @gray-base: mix(desaturate(@color, 80%), #515151, 75%);
  @gray-step: 12.5%;

  @gray-bases:  @gray-lightest-base,
                @gray-lighter-base,
                @gray-light-base,
                @gray-base,
                @gray-dark-base,
                @gray-darker-base,
                @gray-darkest-base,
                darken(@gray-darkest-base, 3%); // placeholder for overflow

  @gray-light-base:             lighten(@gray-base; @gray-step);
  @gray-lighter-base:           lighten(@gray-base; @gray-step*2);
  @gray-lightest-base:          lighten(@gray-base; @gray-step*4);

  @gray-dark-base:              darken(@gray-base; @gray-step);
  @gray-darker-base:            darken(@gray-base; @gray-step*2);
  @gray-darkest-base:           darken(@gray-base; @gray-step*4);

  .set-gray-shift() when (@scheme-type = light) {
    @gray-shift: 3;
  }

  .set-gray-shift() when (default()) {
    @gray-shift: 2;
  }

  .set-gray-shift() when (@scheme-type = dark) {
    @gray-shift: 1;
  }

  .set-gray-shift();

  @gray-lighter:      extract(@gray-bases; 0 + @gray-shift);
  @gray-light:        extract(@gray-bases; 1 + @gray-shift);
  @gray:              extract(@gray-bases; 2 + @gray-shift);
  @gray-dark:         extract(@gray-bases; 3 + @gray-shift);
  @gray-darker:       extract(@gray-bases; 4 + @gray-shift);
}
