// CSS for standard HMTL elements

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

html, body, ul, ol, li, form, fieldset, legend {
  margin: 0;
  padding: 0;
}

body {
  .colorize(@background);
  font-size: 16px;
  line-height: @line-height;
  & when (@sticky-nav = true) { padding-top: @nav-height + @padding;}
  margin-bottom: 0;
  font-family: -apple-system,
                BlinkMacSystemFont,
                "Segoe UI",
                Roboto,
                Oxygen-Sans,
                Ubuntu,
                Cantarell,
                "Helvetica Neue",
                Arial,
                sans-serif;

  .on-tablet({
    font-size: 18px;
  });
}

nav {
  @color: @base-color;
  @height: @nav-height;

  .button-color(@color1, @active-state: false);

  height: @height;
  line-height: @height;
  font-size: 18px;
  max-height: @height;
  padding: 0;
  margin-bottom: @padding;
  & when (@sticky-nav = true) { border-radius: @border-radius;}
  z-index: 1000;

  > section {
    padding: 0;
    max-width: @content-max-width;
  }

  > section > * { // pseudo reset
    display: none;
    float:left;
    position: relative;
    border: none;
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    height: @height;
    vertical-align: middle;
    overflow: hidden;

    .on-tablet({
      display: block;
    });

    &:first-child {
      display: block;
      margin-right: @padding * 2;

      .on-large-phone({
        margin-right: @height;
      });
    }

    &:last-child {
      display: block;
      float: right;
      line-height: @height - 6;
    }
  }

  ul {
    height: @height;
  }

  li {
    float:left;
    height: @height;
    line-height: @height;
    list-style: none;
  }

  h1 {
    display: block;
    float: left;
    font-size: 26px;
    line-height: @height;
    padding: 0 @padding;
    color: inherit;
  }

  a {
    display: block;
    float: left;
    text-decoration: none;
    color: inherit;
  }

  li > a {
    padding-left: @padding;
    padding-right: @padding;

    &:hover {
      background-color: rgba(255,255,255,.15);
    }
  }

  & when (@sticky-nav = true) {
    position: fixed; top: 0; left: 0;
    width: 100%;
    border-radius: 0;
  }

  .no-user-select();
}

section {
  width: 100%;
  margin: 0 auto;
  padding: @padding;

  &:first-child {
    margin-top: 0;
  }

  > * {
    margin: 0 auto;
    max-width: @content-max-width;

    &:only-child {
      padding-top: 1em;
      padding-bottom: 1em;
      margin-bottom: 0;
    }
  }

  > aside {
    margin-bottom: 1em;
  }

  > * + * {
    margin-top: @padding;
  }

  .make-section-colors-for(@colors) {
    // make section colors for a list of color variable names
    // sections will use variable names as class names

    @iterations: length(@colors);

    .make-section-color(1);

    .make-section-color(@index) when (@index <= @iterations) {

      @color-name: extract(@colors, @index);
      @this-color: @@color-name;

      &.@{color-name} {
        .section-color(@this-color);
      }

      .make-section-color(@index + 1);
    }
  }

  .section-color(@color) {
    @light-bg: average(@color, @gray-lightest-base);
    @dark-bg: average(@color, @gray-darkest-base);
    .colorize(@light-bg, @light-bg, @dark-bg);
  }

  .make-section-colors-for(@semantic-colors);
}

main {
  padding: @padding;
  max-width: @content-max-width;
  margin: 0 auto;
  margin-bottom: 1em;
  text-align: center;

  p { text-align: left;}

  h1, h2 {
    text-align: center; 

    & + p {
      text-align: center;
      font-size: 125%;
      margin-bottom: 1em;
    }
  }

  img {
    margin: 0 auto;
    max-width: 100%;
  }

  section > & {
    border-radius: @border-radius;
  }

  .button-elements({
    font-size: 110%;
    .button-color(@base-color);

    &:only-child, &:only-of-type { font-size: 125%; margin-bottom: 1em;}
  });

  .modal-breakpoint(@rules) {
    @media screen and (min-width: @content-max-width) { @rules();}
  }

  .modal-breakpoint({
    border-radius: @border-radius;
  });

  .on-desktop({
    max-width: .8*@content-max-width;
  });

  .make-main-colors-for(@colors) {
    // make main colors for a list of color variable names
    // mains will use variable names as class names

    @iterations: length(@colors);

    .make-main-color(1);

    .make-main-color(@index) when (@index <= @iterations) {

      @color-name: extract(@colors, @index);
      @this-color: @@color-name;

      &.@{color-name} {
        .main-color(@this-color);
      }

      .make-main-color(@index + 1);
    }
  }

  .main-color(@color) {
    .set-a-color(@color);
    .colorize(@color, @a-color, @a-color);
  }

  .main-color(@base-color);

  .make-main-colors-for(@semantic-colors);
}

.headline-elements({
  margin-top: 1em;
  margin-bottom: 1em;
  text-align: center;
  line-height: @line-height;
  font-weight: bold;

  &:only-child {
    margin-top: 0;
  }
});

h1 { font-size: 2.5em;}
h2 { font-size: 2.2em;}
h3 { font-size: 1.9em;}
h4 { font-size: 1.7em;}
h5 { font-size: 1.3em;}
h6 { font-size: 1.1em;}

h1, h2, h3, h4 {
  & + & {
    margin-top: 0;
  }
}

h5, h6 {
  margin-top: .5em;
  text-transform: uppercase;
}

p, form, article, ul, dl, li, aside {
  margin: 0 auto 1em auto;

  .on-large-phone({
    max-width: @text-measure;
  });
}

ul {
  margin: 0 auto 2em;
}

p {
  padding: 0;

  .p-color(@color) {
    .set-a-color(@color);
    .colorize(@a-color, @a-color, @color);
  }

  .make-paragraphs-for(@colors) {
    // make paragraphs for a list of color variable names

    @length: length(@colors);

    .make-p();

    .make-p(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;

      &.@{color-name} { .p-color(@color);}

      .make-p(@index + 1);
    }
  }

  .make-paragraphs-for(@semantic-colors);
}

aside, footer {
  margin-bottom: @padding;
  border-radius: @border-radius;

  > * {
    margin-bottom: @padding/2;

    &:last-child {
      margin-bottom: 0;
    }
  }

  > form {
    padding: 0;
  }

  > button {
    width: 100%;
  }

  aside {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
  }

  &:only-child {
    margin-bottom: 0;
    font-size: 120%;
  }

  .semantic-classes({
    padding: @padding 1em;
  });

  .on-large-phone({
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: row;
    flex-direction: row;
    -webkit-align-items: center;
    align-items: center;
    -webkit-justify-content: center;
    justify-content: center;

    > button {
      width: auto;
      margin-bottom: 0;
    }

    > * { 
      margin-left: @padding;
      margin-bottom: 0;

      &:first-child {
        margin-left: 0;
      }
    }

    > p {
      margin-right: 0;
      margin-left: @padding*2;
    }

    > p + * {
      margin-left: @padding*2;
    }

    .headline-elements({
      margin: 0 @padding*2;
    });
  });

  .aside-color(@color) {
    .set-a-color(@color);
    .set-c-color(@color);

    @light-bg: mix(@color, white, 50%);
    @mid-bg: @light-bg;
    @dark-bg: mix(@c-color, black, 50%);

    .colorize(@light-bg, @mid-bg, @dark-bg);
  }

  .make-paragraphs-for(@colors) {
    // make paragraphs for a list of color variable names

    @length: length(@colors);

    .make-aside();

    .make-aside(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;

      &.@{color-name} { .aside-color(@color);}

      .make-aside(@index + 1);
    }
  }

  .make-paragraphs-for(@semantic-colors);
}

p.success,
p.failure,
p.action,
p.reaction,
p.info,
p.warning { 
  padding: @padding 1em;
}

ul, ol {
  padding-left: 2ch;
}

dt { 
  font-weight: bold;
  font-size: 90%;
}

dd {
  margin-bottom: @padding;
}

a {
  color: inherit;
  text-decoration: underline;
}

footer {
  body > & {
    padding-top: @padding;
    margin-top: @padding*4;
    width: auto;
    max-width: 100%;
    border-radius: 0;
  }

  aside { max-width: @content-max-width;}

  .semantic-classes({
    padding: @padding;
  });

  .on-large-phone({
    -webkit-align-items: flex-end;
    align-items: flex-end;
    -webkit-justify-content: flex-end;
    justify-content: flex-end;
  });
}

form {

  padding: .4em 1.62ch;
  margin-bottom: 0;

  p {
    padding: 0;
  }

  input,
  textarea {
    width: 100%;
    min-width: 18ch;
    padding: 1ch;
    border: 1px solid @gray-darker;
  }

  input, label {
    & + & {
      margin-top: @padding;
    };
  }

  .headline-elements({
    &:first-child { margin-top: 0;}
  });
}

label {
  display: block;
}

strong {
  font-weight: bold;
}

table {

  .table-color(@color) {

    .set-c-color(@color);

    @row-a: mix(@color, @c-color, 80%);
    @row-b: mix(@color, @c-color, 60%);

    & th {
      .button-color(@color, @active-state: false);
    }

    & td {
      .contrast-text-against(@row-a);
    }

    & tr {
      background-color: @row-b;

      &:nth-of-type(odd) {
        background-color: @row-a;
      }
    }
  }

  .make-table-colors-for(@colors) {
    // make table colors for a list of color variable names
    // tables will use variable names as class names

    @iterations: length(@colors);

    .make-table-color(1);

    .make-table-color(@index) when (@index <= @iterations) {

      @color-name: extract(@colors, @index);
      @this-color: @@color-name;

      &.@{color-name} {
        .table-color(@this-color);
      }

      .make-table-color(@index + 1);
    }
  }

  border-radius: @border-radius;
  max-width: 100%;
  border-collapse: collapse;
  border-spacing: 0;

  // .table-color(@base-color);
  .make-table-colors-for(@semantic-colors);

  .table-color(@background);

  th, td {
    text-align: left;
    vertical-align: top;
    padding: @padding/2;
  }

  thead th {
    vertical-align: bottom;
  }

  tr:first-child > th:first-child {
    border-top-left-radius: @border-radius;
  }

  tr:first-child > th:last-child {
    border-top-right-radius: @border-radius;
  }

  tr:last-child > td:first-child {
    border-bottom-left-radius: @border-radius;
  }

  tr:last-child > td:last-child {
    border-bottom-right-radius: @border-radius;
  }

  tr > td,
  tr > th {
    &:first-child {
      padding-left: @padding;
    }
    &:last-child {
      padding-right: @padding;
    }
  }
}

fieldset,img { border: 0; }

caption, figcaption {
  text-align: left;
  vertical-align: top;
  font-weight: normal;
}

abbr, acronym {
  border-bottom: .1em dotted;
  cursor: help;
}

blockquote {
  @border: 5px solid @color1a;
  
  padding-left: 1em;
  margin-bottom: 1em;
  border-left: @border;
  max-width: @text-measure;

  &:nth-of-type(even) {
    // alternates left and right layout

    text-align: right;
    border-left: none;
    border-right: @border;
    padding-left: 0;
    padding-right: 1em;
  }

  cite {
    font-style: italic;
    display: block;
    &:before {
      content: '—';
      padding-right: 5px;
    }
  }
}

code, pre {
  @color: average(@gray-darkest-base, #333);
  .colorize(@color);
  font-family: monospace;
  font-size: 85%;
  vertical-align: middle;
  padding: @padding 1em;
  border-radius: @border-radius;
}

code {
  padding: .16em .5em;
  border-radius: @border-radius/2;
}

pre {
  margin-bottom: 1em;
}

.button-color(@color; @active-state: true) {

  @iterations: 10;

  .set-contrast-ratio(@color, white);
  .darken-bg(darken(@color, 3%), @contrast-ratio, 1);

  .darken-bg(@bg-color, @contrast-ratio, @index) when (@contrast-ratio < 4.5)
                                                  and (@index < @iterations) {
    @new-bg-color: desaturate(darken(@bg-color, 5% + @index), 2.5%);
    .set-contrast-ratio(white, @new-bg-color);
    .darken-bg(@new-bg-color, @contrast-ratio, @index + 1);
  }

  .darken-bg(@bg-color, @contrast-ratio, @index) when (default()) {
    background-color: @bg-color;
    color: white;

    &:active when (@active-state = true) { 
      .set-c-color(@bg-color);
      background-color: @c-color;

      & when (@scheme-type = light) {
        box-shadow: inset 0 1px 0 darken(@c-color, 7.5%);
      }

      & when (@scheme-type = medium) {
        box-shadow: inset 0 1px 0 darken(@c-color, 5%);
      }

      & when (@scheme-type = dark) {
        box-shadow: inset 0 1px 0 darken(@c-color, 2.5%);
      }
    }
  }
}

.button-elements({

  .make-buttons-for(@colors) {
    // make buttons for a list of color variable names
    // buttons will use variable names as class names

    @length: length(@colors);

    .make-button();

    .make-button(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;
      
      .@{color-name} & { .button-color(@color);}
      &.@{color-name} { .button-color(@color) !important;}

      .make-button(@index + 1);
    }
  }

  display: inline-block;

  text-align: center;
  vertical-align: middle;
  min-height: 32px;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: none;
  border-radius: @border-radius;
  outline: none;
  white-space: nowrap;
  padding: .35em .65em;
  .button-color(@gray);
  .make-buttons-for(@semantic-colors);
  .no-user-select();
});

mark, ::selection {
  .colorize(@color2c);
}

hr {
  @background: @color1;
  background: @background;
  border-color: transparent;
  border-radius: @border-radius;
  height: @border-radius;
  margin-bottom: 1em;
  max-width: @text-measure;
}