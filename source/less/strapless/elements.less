// CSS for standard HMTL elements

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

html, body, ul, ol, li, form, fieldset, legend {
  margin: 0;
  padding: 0;
}

body {
  .body-color(@color) when (default()) {
    .colorize(@background);
  }

  .body-color(@color) when (luma(@color) < 15%) {
    .colorize(@gray-darker);
  }

  .body-color(@color) when (luma(@color) > 88%), 
                        (saturation(@color) > 80%),
                        (saturation(@color) = 0) {
    .colorize(white);
  }

  .body-color(@background);
  font-size: 16px;
  line-height: @line-height;
  padding-top: @navbar-height + @padding;
  margin-bottom: 0;
  font-family: -apple-system,
                BlinkMacSystemFont,
                "Segoe UI",
                Roboto,
                Oxygen-Sans,
                Ubuntu,
                Cantarell,
                "Helvetica Neue",
                Arial,
                sans-serif;

  .on-tablet({
    font-size: 20px;
  });
}

nav {
  @color: @base-color;
  @height: @navbar-height;

  .colorize(@color);

  height: @height;
  line-height: @height;
  max-height: @height;
  padding: 0;
  border-radius: @border-radius;
  z-index: 1000;

  > section {
    padding: 0;
    max-width: @content-max-width;
  }

  > section > * { // pseudo reset
    display: none;
    float:left;
    position: relative;
    border: none;
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    height: @height;
    vertical-align: middle;
    overflow: hidden;

    .on-tablet({
      display: block;
    });

    &:first-child {
      display: block;
      margin-right: @padding * 2;

      .on-large-phone({
        margin-right: @height;
      });
    }

    &:last-child {
      display: block;
      float: right;
      line-height: @height - 6;
    }
  }

  ul {
    height: @height;
  }

  li {
    float:left;
    height: @height;
    line-height: @height;
    list-style: none;
  }

  h1 {
    display: block;
    float: left;
    font-size: 26px;
    line-height: @height;
    padding: 0 @padding;
    color: inherit;
  }

  a {
    display: block;
    float: left;
    text-decoration: none;
    color: inherit;
  }

  li > a {
    padding-left: @padding;
    padding-right: @padding;

    &:hover {
      background-color: rgba(255,255,255,.15);
    }
  }

  body > &:first-child, body > &:last-child {
    // go sticky if at end or beginning of body
    position: fixed; top:0; left: 0;
    width: 100%;
    border-radius: 0;
  }
  .no-user-select();
}

section {
  width: 100%;
  margin: 0 auto;
  padding: @padding @padding @padding*4 @padding;

  &:first-child {
    margin-top: 0;
  }

  > * {
    margin: 0 auto;
    max-width: @content-max-width;

    &:last-child {
      margin-bottom: @padding;
    }    
  }

  > * + * {
    margin-top: @padding;
  }
}

main {
  .main-color(@color) {
    .colorize(@color);
  }

  .main-color(@color) when (luma(@color) < 20%) {
    @color: average(@gray-darker, @color1c);
    .colorize(@color);
  }

  .main-color(@color1c);
  padding: @padding;
  max-width: @content-max-width;
  margin: 0 auto;
  margin-bottom: 1em;

  h1, h2 {
    text-align: center; 

    & + p {
      text-align: center;
      font-size: 125%;
      margin-bottom: 1em;
    }
  }

  img {
    margin: 0 auto;
    max-width: 100%;
  }

  .on-desktop({
    padding: @padding*2;
    border-radius: @border-radius;
  });
}

h1 { font-size: 2.5em;}
h2 { font-size: 2.2em;}
h3 { font-size: 1.9em;}
h4 { font-size: 1.7em;}
h5 { font-size: 1.3em;}
h6 { font-size: 1.0em;}

h1, h2, h3, h4 {
  margin-top: 1em;
  margin-bottom: 1em;
  text-align: center;
  line-height: @line-height;
  font-weight: bold;

  & + & {
    margin-top: 0;
  }
}

h5, h6 {
  margin-top: .5em;
  margin-bottom: 1em;
  text-align: center;
  text-transform: uppercase;
}

p, form, article, ul, dl, li {
  margin: 0 auto 1em;

  .on-large-phone({
    max-width: @text-measure;
  });
}

p.info,
p.warning,
p.action,
p.reaction,
p.success,
p.failure {
  padding: .5em 1em;
}

ul, ol {
  padding-left: 2ch;
}

dt { 
  font-weight: bold;
  font-size: 90%;
}

dd {
  margin-bottom: @padding;
}

a {
  color: inherit;
  text-decoration: underline;
}

aside {
  margin-bottom: 1em;

  > button {
    width: 100%;
    margin-bottom: .5em;
  }

  > * {
    margin-right: @padding;

    &:last-child {
      margin-right: 0;
    }
  }

  .on-large-phone({
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: row;
    flex-direction: row;
    -webkit-align-items: center;
    align-items: center;
    -webkit-justify-content: center;
    justify-content: center;

    > button {
      width: auto;
    }

    p + & {
      padding-top: 1em;
    }
  });
}

form {
  @form-measure: 45ch;

  .form-color(@color) {

    .colorize(@color);

    input,
    textarea {
      @input-bg-color: mix(@gray-lightest-base, white, 20%);
      .colorize(@input-bg-color);
      color: #333;
      border: 1px solid darken(@color, 10%);
    }
  }

  .form-color(@color1);
  padding: .4em 1.62ch;
  margin-bottom: 2em;
  max-width: @form-measure;

  > * {
    // width: 100%;
    max-width: @form-measure;
    margin-top: .4em;
    margin-bottom: .4em;

    & + button, &:last-child > button {
      // margin-top: .8em;
      // margin-bottom: @padding/4;
    }
  }

  p {
    padding: 0;
  }

  input,
  textarea {
    width: 100%;
    padding: 1ch;
    border: 1px solid @gray-darker;
  }

  > footer {
    text-align: right;
    > button + button {
      margin-left: @padding;
    }
  }

  .headline-elements({
    &:first-child { margin-top: 0;}
  });

  .button-elements({
    font-size: 110%;
    margin-top: .4em;
    margin-bottom: .4em;
  });
}

label {
  display: block;
}

strong {
  font-weight: bold;
}

.table-color(@color) {

  .make-palette(@color; ebb);
  @header: @color1;
  @row-a: @color1a;
  @row-b: darken(@row-a, 1.5%);

  & > thead > tr > th {
    background-color: @header;
    .contrast-text-against(@header);
  }

  & > tbody > tr > td {
    .contrast-text-against(@row-a);
  }

  & > tbody > tr {
    background-color: @row-a;
  }

  & > tbody > tr:nth-of-type(odd) {
    background-color: @row-b;
  }
}

.make-table-colors-for(@colors) {
  // make table colors/classes for a list of color variable names
  // tables will use variable names as class names

  @iterations: length(@colors);

  .make-table-color(1);

  .make-table-color(@index) when (@index <= @iterations) {

    @color-name: extract(@colors, @index);
    @this-color: @@color-name;

    table.@{color-name} {
      .table-color(@this-color);
    }

    .make-table-color(@index + 1);
  }
}

table {

  .table-color(@color) {

    .make-palette(@color; ebb);
      @header: @color1;
      @row-a: @color1a;
      @row-b: darken(@row-a, 1.5%);

    & > thead > tr > th {
      background-color: @header;
      .contrast-text-against(@header);
    }

    & > tbody > tr > td {
      .contrast-text-against(@row-a);
    }

    & > tbody > tr {
      background-color: @row-a;
    }

    & > tbody > tr:nth-of-type(odd) {
      background-color: @row-b;
    }
  }

  .make-table-colors-for(@colors) {
    // make table colors for a list of color variable names
    // tables will use variable names as class names

    @iterations: length(@colors);

    .make-table-color(1);

    .make-table-color(@index) when (@index <= @iterations) {

      @color-name: extract(@colors, @index);
      @this-color: @@color-name;

      table.@{color-name} {
        .table-color(@this-color);
      }

      .make-table-color(@index + 1);
    }
  }

  max-width: 100%;
  border-collapse: collapse;
  border-spacing: 0;

  .table-color(@gray);

  th, td {
    text-align: left;
    vertical-align: top;
    padding: @padding/2;
  }

  thead th {
    vertical-align: bottom;
  }

  tr > td,
  tr > th {
    &:first-child {
      padding-left: @padding;
    }
    &:last-child {
      padding-right: @padding;
    }
  }
}

fieldset,img { border: 0; }

caption, figcaption {
  text-align: left;
  vertical-align: top;
  font-weight: normal;
}

input, textarea {
  font-size: 110%;
  line-height: 1.1;
}

abbr, acronym {
  border-bottom: .1em dotted;
  cursor: help;
}

blockquote {
  @border: 5px solid @color1a;
  
  padding-left: 1em;
  margin-bottom: 1em;
  border-left: @border;
  max-width: @text-measure;

  &:nth-of-type(even) {
    // alternates left and right layout

    text-align: right;
    border-left: none;
    border-right: @border;
    padding-left: 0;
    padding-right: 1em;
  }

  cite {
    font-style: italic;
    display: block;
    &:before {
      content: 'â€”';
      padding-right: 5px;
    }
  }
}

code, pre {
  .code-color(@code-color) {
    background: mix(@code-color, #333, 10%);
    color: mix(@code-color, white, 10%);
  }

  .code-color(@color2);
  font-family: monospace;
  vertical-align: middle;
  font-size: 72%;
  padding: .125em .5em .175em .5em;
  border-radius: @border-radius/2;
}

.button-elements({

  .button-color(@color) {
    background-color: @color;
    border-color: darken(@color, 5%);

    &:active {
      background-color: darken(@color, 3%);
    }
  }

  .button-color(@color) when (@tone = black) {
    .shade-text(@color);
  }

  .button-color(@color) when (@tone = white) {
    .tint-text(@color);
  }

  .make-buttons-for(@colors) {
    // make buttons for a list of color variable names
    // buttons will use variable names as class names

    @length: length(@colors);

    .make-button();

    .make-button(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;

      &.@{color-name} { .button-color(@color);}

      .make-button(@index + 1);
    }
  }

  .make-buttons-for(@semantic-colors);
  display: inline-block;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: none;
  border-radius: @border-radius;
  outline: none;
  white-space: nowrap;
  padding: .4em 1ch;
  .button-color(@reaction);
  .no-user-select();
});



mark, ::selection {
  .colorize(@color1b);
}

hr {
  border-color: @background;
  border-top-color: darken(@background, 2%);
  border-bottom-color: lighten(@background, 5%);
}