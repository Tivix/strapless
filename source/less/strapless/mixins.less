// mixins

.contrast-text-against(@bg-color: @background) {
  // automatically sets contrastful text color given a background color

  .set-contrast-ratio-black();
  .set-contrast-ratio-white();

  .text-color(@bg-color);

  .set-contrast-ratio-black() {
    .set-contrast-ratio(@bg-color, black);
    @contrast-ratio-black: @contrast-ratio;
  }

  .set-contrast-ratio-white() {
    .set-contrast-ratio(@bg-color, white);
    @contrast-ratio-white: @contrast-ratio;
  }

  .text-color(@color) when (@contrast-ratio-white > @contrast-ratio-black) {
    .tint-text(@color);
  }

  .text-color(@color) when (default()) {
    .shade-text(@color);
  }
}

.contrast-text-against(@bg-color: @background) when (luma(@bg-color) = 100%) {
  color: #545454;
}

.set-contrast-ratio(@a, @b) {
  // sets variable @contrast-ratio to contrast ratio between two colors
  @l1: unit(luma(@a))/100;
  @l2: unit(luma(@b))/100;
  @contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
}

.set-contrast-ratio(@a, @b) when (luma(@b) > luma(@a)) {
  @l1: unit(luma(@b))/100;
  @l2: unit(luma(@a))/100;
  @contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
}

.set-contrast-ratio(@a, @b) when (luma(@b) = luma(@a)) {
  @contrast-ratio: 1;
}

.colorize(@color) {
  // set a background color and make sure text works with it
  background-color: @color;
  .contrast-text-against(@color);
}

.no-user-select() {
  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}

.clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

.make-color-classes-for(@colors) {
  @iterations: length(@colors);

  .make-color-class(1);

  .make-color-class(@index) when (@index <= @iterations) {
    @color-name: extract(@colors, @index);
    @this-color: @@color-name;

    .@{color-name} {
      .colorize(@this-color);
    }

    .make-color-class(@index + 1);
  }
}

.quadratic-compare(@compare, @c1, @c2) {
  // compares c1 and c2 to a given color, assigns a @farther and @closer

  .set-distance-m-c1();
  .set-distance-m-c2();

  .resolve();

  .set-distance-m-c1() {
    .set-distance(@compare, @c1);
    @distance-m-c1: @distance;
  }

  .set-distance-m-c2() {
    .set-distance(@compare, @c2);
    @distance-m-c2: @distance;
  }

  .resolve() when (@distance-m-c2 > @distance-m-c1) {
    @farther: @c2;
    @closer: @c1;
  }

  .resolve() when (default()) {
    @farther: @c1;
    @closer: @c2;
  }
}

.set-distance(@a, @b) {
  // sets @distance to distance between two colors

  @r-values-a-b: 2*(red(@b) - red(@a))*(red(@b) - red(@a));
  @g-values-a-b: 4*(green(@b) - green(@a))*(green(@b) - green(@a));
  @b-values-a-b: 3*(blue(@b) - blue(@a))*(blue(@b) - blue(@a));

  @distance: sqrt(@r-values-a-b + @g-values-a-b + @b-values-a-b);
}

.tint-text(@bg-color;) {
  .tint(@bg-color, 1, 1);

  .tint(@color, @contrast-ratio, @index) when (@contrast-ratio < 7) 
                                          and (@index < 15) 
                                          and (luma(@color) < 100%) {
    // adds white until contrast ratio is met

    .set-contrast-ratio(@bg-color, @color);

    .tint(tint(@bg-color, 40% + @index*4); @contrast-ratio; @index + 1);
  }

  .tint(@color, @contrast-ratio, @index) when (default()) {
    color: @color;
    .set-contrast-ratio(@bg-color, @color);
    &:after { content: "@{contrast-ratio}, @{index}"}
  }
}

.shade-text(@bg-color;) {
  .shade(@bg-color, 1, 1);

  .shade(@color, @contrast-ratio, @index) when (@contrast-ratio < 4.5) and (@index < 15) {
    // slowly adds black until contrast ratio is met

    .set-contrast-ratio(@bg-color, @color);

    .shade(shade(@bg-color, @index*3 + 60%); @contrast-ratio; @index + 1);
  }

  .shade(@color, @contrast-ratio, @index) when (default()) {
    color: @color;
    .set-contrast-ratio(@bg-color, @color);
    &:after { content: "@{contrast-ratio}, @{index}"}
  }
}
