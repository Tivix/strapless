// mixins

.text-color(@color: @color1; @contrast: 1;) {

  & when (luma(@color) < @contrast-break) {
    color: hsl(hue(@color); saturation(@color) + 10; 98.5%); // pretty much white
  }

  & when (luma(@color) >= @contrast-break) {
    color: mix(darken(@color;20%); #333; 40%);
  }

  & when ((red(@color) + green(@color) - blue(@color)) > 420) {
    // for particularly obnoxious yellows
    color: mix(darken(@color;20%); #2f3125; 40%);
  }
}

.contrast-text-against(@color) {
  // a more reader-friendly alias for .text-color
  .text-color(@color);
}

.colorify(@color) {
  background-color: @color;
  .contrast-text-against(@color);
  border-color: @color;
}

.no-user-select() {
  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}

.clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// element mixins

.sl-main(@color: @color1c;) {
  padding: @padding;
  margin: 0;
  background-color: @color;
  .contrast-text-against(@color);

  h1, h2 {
    text-align: center; 

    & + p {
      text-align: center;
      font-size: 125%;
      margin-bottom: 1em;
    }
  }

  img {
    margin: 0 auto;
    max-width: 100%;
  }

  .on-large-phone({
    max-width: @content-width;
    margin: 0 auto;
    padding: @padding*2;
    border-radius: @border-radius;
  });
}

.sl-form(@color) {
  #strapless.make-palette(@color, ebb);
  @input-color: #fafafa;
  background: @color1;
  max-width: 36ch;
  .contrast-text-against(@color1);
  padding: @padding;

  > * {
    width: 100%;
    max-width: 36ch;
    margin-bottom: .8em;

    & + button {
      margin-top: .8em;
      margin-bottom: @padding/4;
      font-size: 133%;
    }
  }

  p {
    padding: 0;
  }

  input,
  textarea {
    width: 100%;
    padding: @padding;
    border: none;
    background: @input-color;
    .contrast-text-against(@input-color);
  }

  select {
    padding: @padding;
    .contrast-text-against(@input-color);
    vertical-align: middle;
    background: @input-color;
    background-image: none;
    border: none;
    border-radius:0;
    height:16px + @padding * 2;
    -moz-appearance: menulist-button;
    -webkit-appearance: menulist-button;
  }
}

.sl-code(@code-color) {
    @color: mix(@code-color, white, 10%);
    @background: mix(@color, #333, 10%);

    font-family: monospace;
    font-size: 85%;
    padding: .1em .5em .15em .5em;
    border-radius: @border-radius/2;
    background: @background;
    color: @color;
}

.sl-button(@color: @gray) {
  background-color: @color;
  border-color: darken(@color, 5%);
  .contrast-text-against(@color);

  &:active {
    background-color: darken(@color, 3%);
  }
}

.make-sl-buttons-for(@colors) {
  // make buttons for a list of color variable names
  // buttons will use variable names as class names

  @length: length(@colors);

  .make-sl-button();

  .make-sl-button(@index:1) when (@index <= @length) {
    @color-name: extract(@colors, @index);
    @color: @@color-name;

    button.@{color-name} {
      // &:extend(.sl-button-base all);
      .sl-button(@color);
    }

    .make-sl-button(@index + 1);
  }
}

.sl-navbar(@color) {

  @height: @navbar-height;

  background-color:@color;
  .contrast-text-against(@color);

  height: @height;
  line-height: @height;
  max-height: @height;
  padding: 0;
  border-radius: @border-radius;
  z-index: 1000;

  > section {
    padding-top: 0;
  }

  > section > * { // pseudo reset
    display: none;
    float:left;
    position: relative;
    border: none;
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    height: @height;
    vertical-align: middle;
    overflow: hidden;

    .on-tablet({
      display: block;
    });

    &:first-child {
      display: block;
      margin-right: @padding * 2;

      .on-large-phone({
        margin-right: @height;
      });
    }

    &:last-child {
      display: block;
      float: right;
      line-height: @height - 6;
    }
  }

  ul {
    height: @height;
  }

  li {
    float:left;
    height: @height;
    line-height: @height;
    list-style: none;
  }

  h1 {
    display: block;
    float: left;
    font-size: 26px;
    line-height: @height;
    padding: 0 @padding;
    .contrast-text-against(@color);
  }

  a {
    display: block;
    float: left;
    text-decoration: none;
     .contrast-text-against(@color);
  }

  li > a {
    padding-left: @padding;
    padding-right: @padding;

    &:hover {
      background-color: lighten(@color, 10%);
      .contrast-text-against(lighten(@color, 10%));
    }
  }

  body > &:first-child, body > &:last-child {
    position: fixed; top:0; left: 0;
    width: 100%;
    border-radius: 0;
  }
}

.sl-table(@table-color: @color1;) {

  #strapless.make-palette(@table-color; ebb);
    @header: @color1;
    @row-a: @color1a;
    @row-b: darken(@row-a, 1.5%);

  & > thead > tr > th {
    background-color: @header;
    .contrast-text-against(@header);
  }

  & > tbody > tr > td {
    .contrast-text-against(@row-a);
  }

  & > tbody > tr {
    background-color: @row-a;
  }

  & > tbody > tr:nth-of-type(odd) {
    background-color: @row-b;
  }
}

.make-sl-tables-for(@colors) {
  // make tables for a list of color variable names
  // tables will use variable names as class names

  @iterations: length(@colors);

  .make-sl-table(1);

  .make-sl-table(@index) when (@index <= @iterations) {

    @color-name: extract(@colors, @index);
    @this-color: @@color-name;

    table.@{color-name} {
      .sl-table(@this-color);
    }

    .make-sl-table(@index + 1);
  }
}