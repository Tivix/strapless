.contrast-text-against(@color; @contrast-standard: 4.5) when (default()) {
  // automatically sets contrastful text color given a background color

  // find how much we could tint by finding color/white contrast ratio
  .set-contrast-ratio(@color, white);

  // use 4.5 c/r as a middle contrast wedge to determine if we can tint:

  .tint-or-shade(@color) when (@contrast-ratio > 4.5) and (@contrast-standard <= 7) {
    // tinting usually needs at least 7
    .tint-text-against(@color; 7;);
  }

  .tint-or-shade(@color) when (@contrast-ratio > 4.5) and (@contrast-standard > 7) {
    // if the standard is above 7, we'll use that
    .tint-text-against(@color; @contrast-standard;);
  }

  .tint-or-shade(@color) when (default()) {
    // if tinting can't work, then shade
    .shade-text-against(@color; @contrast-standard;);
  }

  .tint-or-shade(@color);
}

.contrast-text-against(@color, @contrast-standard: 9) when (@color = white) and (@contrast-standard >= 4.5) {
  // the objectively correct text color against white
  // arrived at by monks after years of meditation and seclusion

  // a contrast ratio of 9, not too harsh, not fading away
  // not angry like #333, or non-committal like #606060
  // with the subtlest of references to san francisco

  color: #494949;
}

.tint-text-against(@color; @contrast-standard: 7) {
  // adds white to background color until contrast standard is met
  // uses result as text color

  @start: 55%;
  @iterations: 10;
  @interval: unit((100% - @start)/@iterations);
  @tint: tint(@color, @start + @index*@interval);
  @index: 0;

  .tint-text(1, 1);

  .tint-text(@contrast-ratio, @index) when (@contrast-ratio < @contrast-standard)
                                        and (@index < @iterations) {
    .set-contrast-ratio(@color, @tint);
    .tint-text(@contrast-ratio; @index + 1);
  }

  .tint-text(@contrast-ratio, @index) when (default()) {
    color: @tint;
  }
}

.shade-text-against(@color; @contrast-standard: 7) {
  // adds black to background color until contrast standard is met
  // uses that as text color

  @start: 50%;
  @iterations: 12;
  @interval: unit((100% - @start)/@iterations);
  @shade: shade(@color, @start + @index*@interval);
  @index: 0;

  .shade-text(1, 1);

  .shade-text(@contrast-ratio, @index) when (@contrast-ratio < @contrast-standard)
                                        and (@index < @iterations) {
    .set-contrast-ratio(@color, @shade);
    .shade-text(@contrast-ratio; @index + 1);
  }

  .shade-text(@contrast-ratio, @index) when (default()) {
    color: @shade;
  }
}

.invert-text-against(@color; @contrast-standard: 4.5; @button: false;) {

  // always results in white text
  // darkens given background when needed to meet contrast standard

  @iterations: 10;

  .set-contrast-ratio(@color, white);
  .darken-bg(@color, @contrast-ratio, 1);

  .darken-bg(@bg-color, @contrast-ratio, @index) when (@contrast-ratio < 4.5)
                                                  and (@index < @iterations) {
    @new-bg-color: darken(@bg-color, 5% + @index);
    .set-contrast-ratio(white, @new-bg-color);
    .darken-bg(@new-bg-color, @contrast-ratio, @index + 1);
  }

  .darken-bg(@bg-color, @contrast-ratio, @index) when (default()) {
    background-color: @bg-color;
    color: white;

    & when (@button = true) {
      &:active {
        background-color: darken(@bg-color, 5%);
        color: mix(@bg-color, white, 5%);
      }
    }
  }
}

.color-text(@color; @text-background: @background; @contrast-standard: 4.5) {

  // darkens text against a background
  // only works with lighter backgrounds

  @iterations: 15;

  .set-contrast-ratio(@color, @text-background);
  .darken-text(@color, @contrast-ratio, 1);

  .darken-text(@text-color, @contrast-ratio, @index) when (@contrast-ratio < @contrast-standard)
                                                  and (@index < @iterations) {
    @new-text-color: darken(@text-color, 5%);
    .set-contrast-ratio(@text-background, @new-text-color);
    .darken-text(@new-text-color, @contrast-ratio, @index + 1);
  }

  .darken-text(@text-color, @contrast-ratio, @index) when (default()) {
    color: @text-color;
  }
}

.colorize(@color) {
  // sets a background color and makes sure text works with it
  background-color: @color;
  .contrast-text-against(@color);
}

.set-a-color(@color, @compare: @color) {

  // a lighter version of the color
  // @color1a, @color3a etc are examples of a-colors

  @iterations: 10;

  .settings() when (@scheme-type = light) {
    @contrast-standard: 1.1;
    @initial-lighten: 2.5%;
  }

  .settings() when (@scheme-type = dark) {
    @contrast-standard: 1.1;
    @initial-lighten: 2.5%;
  }

  .settings() when (default()) {
    @contrast-standard: 1.25;
    @initial-lighten: 5%;
  }

  .set-a(@a, @contrast-ratio, @index) when (@index <= @iterations)
                                       and (@contrast-ratio < @contrast-standard)
                                       and (luma(@a) < 90%) {
    // loop through this until @contrast-standard is met
    @new-a: lighten(@a, 3.5%);
    .set-contrast-ratio(@color, @new-a);
    .set-a(@new-a, @contrast-ratio, @index + 1);
  }

  .set-a(@a, @contrast-ratio, @index) when (default()) {
    // set @a-color when conditions are finally met (or iterations run out)
    @a-color: @a;
  }

  // load settings
  .settings();

  // grab a couple near analogs and figure out which is closer
  .set-closer-farther(@compare; spin(@color, @analog/2); spin(@color, -@analog/2));

  // use the closer color as base for a-color
  .set-a(lighten(@closer, @initial-lighten), 1, 1);
}

.set-b-color(@color; @compare: @base-color; @nearness: @analog;) {

  // a similar luma alternate

  // grab both nearby analogs
  @b1: spin(@color, @nearness);
  @b2: spin(@color, -@nearness);

  // use whichever is closer to the original
  .set-closer-farther(@color; @b1; @b2;);
  @b-base: @closer;

  // adjust b's luma to match
  .set-lumafix(@b-base; @color;);
  @b-color: @lumafix;
}

.set-c-color(@color, @compare: @color, @scheme: @scheme-type) {

  @iterations: 10;

  // a darker version of the color

  .settings() when (@scheme = light) {
    @contrast-standard: 1.1;
    @initial-darken: 2.5%;
  }

  .settings() when (@scheme = dark) {
    @contrast-standard: 1.1;
    @initial-darken: 2.5%;
  }

  .settings() when (default()) {
    @contrast-standard: 1.25;
    @initial-darken: 5%;
  }

  .set-c(@c, @contrast-ratio, @index) when (@index <= @iterations)
                                       and (@contrast-ratio < @contrast-standard) {
    @new-c: darken(@c, 2%);
    .set-contrast-ratio(@color, @new-c);
    .set-c(@new-c, @contrast-ratio, @index + 1);
  }

  .set-c(@c, @contrast-ratio, @index) when (default()) {
    @c-color: @c;
  }

  @initial-c: darken(@color, @initial-darken);

  .settings();
  .set-contrast-ratio(@color, @initial-c);
  .set-closer-farther(@compare; spin(@initial-c, @analog/2); spin(@initial-c, -@analog/2));
  .set-c(@initial-c, @contrast-ratio, 1);
}

.make-color-classes-for(@colors) {
  // takes a list of variable names, creates color(ize) classes for them
  // names must have corresponding variables

  @iterations: length(@colors);

  .make-color-class(1);

  .make-color-class(@index) when (@index <= @iterations) {
    @color-name: extract(@colors, @index);
    @this-color: @@color-name;

    .@{color-name} {
      .colorize(@this-color);
    }

    .make-color-class(@index + 1);
  }
}

.set-contrast-ratio(@a, @b) {
  // sets variable @contrast-ratio to contrast ratio between two colors

  @l1: unit(luma(@a))/100;
  @l2: unit(luma(@b))/100;
  @contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
}

.set-contrast-ratio(@a, @b) when (luma(@b) > luma(@a)) {
  @l1: unit(luma(@b))/100;
  @l2: unit(luma(@a))/100;
  @contrast-ratio: round((@l1 + .05)/(@l2 + .05),2);
}

.set-contrast-ratio(@a, @b) when (luma(@b) = luma(@a)) {
  @contrast-ratio: 1;
}

.set-distance(@a, @b) {
  // sets variable @distance to distance between two colors

  @r-values-a-b: 2*(red(@b) - red(@a))*(red(@b) - red(@a));
  @g-values-a-b: 4*(green(@b) - green(@a))*(green(@b) - green(@a));
  @b-values-a-b: 3*(blue(@b) - blue(@a))*(blue(@b) - blue(@a));

  @distance: sqrt(@r-values-a-b + @g-values-a-b + @b-values-a-b);
}

.set-closer-farther(@compare, @c1, @c2) {
  // compares c1 and c2 to a given color, assigns a @farther and @closer
  // based on distance in RGB space

  .set-distance-m-c1() {
    .set-distance(@compare, @c1);
    @distance-m-c1: @distance;
  }

  .set-distance-m-c2() {
    .set-distance(@compare, @c2);
    @distance-m-c2: @distance;
  }

  .resolve() when (@distance-m-c2 > @distance-m-c1) {
    @farther: @c2;
    @closer: @c1;
  }

  .resolve() when (default()) {
    @farther: @c1;
    @closer: @c2;
  }

  .set-distance-m-c1();
  .set-distance-m-c2();

  .resolve();
}

.set-farther-closer(@compare, @c1, @c2) { .set-closer-farther(@compare, @c1, @c2);}

.set-tone(@color) {
  // sets variable @tone to white or black, depending on which is better for text contrast

  .set-contrast-ratio-black() {
    .set-contrast-ratio(@color, black);
    @contrast-ratio-black: @contrast-ratio;
  }

  .set-contrast-ratio-white() {
    .set-contrast-ratio(@color, white);
    @contrast-ratio-white: @contrast-ratio;
  }

  .set-tone(@color) when (@contrast-ratio-black > @contrast-ratio-white) {
    @tone: black;
  }

  .set-tone(@color) when (default()) {
    @tone: white;
  }

  .set-contrast-ratio-black();
  .set-contrast-ratio-white();

  .set-tone(@color);
}

.set-average(@colors) {
  // averages a list of colors
  // sets result to @average

  @iterations: length(@colors);

  .find-average(extract(@colors, 1), 1);

  .find-average(@color, @index) when (@index <= @iterations) {
    @this-color: extract(@colors, @index);
    @last-color: @color;
    @weight: 100% * (1/@index);
    @new-average: mix(@this-color, @last-color, @weight);

    .find-average(@new-average, @index + 1);
  }

  .find-average(@color, @index) when (default()) {
    @average: @color;
  }
}

.set-lumafix(@color; @compare: @base-color; @luma-multiplier: .6;) {
  // sets @lumafix to a version of @color with luma similar to @compare

  // it's not perfect, use @luma-multilplier to adjust results

  @color-luma: luma(@color);
  @compare-luma: luma(@compare);

  @luma-difference: abs(@color-luma - @compare-luma);

  .adjust-luma(@color, @index) when (luma(@color) < luma(@compare)) {
    @lumafix: lighten(@color, @luma-difference*@luma-multiplier);
  }

  .adjust-luma(@color, @index) when (luma(@color) > luma(@compare)) {
    @lumafix: darken(@color, @luma-difference*@luma-multiplier);
  }

  .adjust-luma(@color, @index) when (default()) {
    @lumafix: @color;
  }

  .adjust-luma(@color, 1);
}

.no-user-select() {
  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}

.hide() {
  &:extend(.hide);
}

.clearfix() {
  &:extend(.clearfix all);
}

.max-width() {
  &:extend(.max-width);
}

.margin-bottom() {
  &:extend(.margin-bottom);
}

.border-radius() {
  &:extend(.border-radius);
}

.padding() {
  &:extend(.padding);
}

.semantic-padding() {
  .semantic-classes({
    &:extend(.padding);
  });
}
