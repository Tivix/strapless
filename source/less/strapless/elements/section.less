.compare-colors(white, black);

section {
  width: 100%;
  margin: 0 auto;
  padding: 2em @padding;

  &:first-child {
    margin-top: 0;
  }

  > * {
    margin: 0 auto;
    max-width: @content-max-width;

    &:only-child {
      padding-top: 1em;
      padding-bottom: 1em;
      margin-bottom: 0;
    }
  }

  > aside {
    margin-bottom: 1em;
  }

  > * + * {
    margin-top: 1em;
  }

  .make-section-colors-for(@colors) {
    // make section colors for a list of color variable names
    // sections will use variable names as class names

    @iterations: length(@colors);

    .make-section-color(1);

    .make-section-color(@index) when (@index <= @iterations) {

      @color-name: extract(@colors, @index);
      @this-color: @@color-name;

      &.@{color-name} {
        .section-color(@this-color);
      }

      .make-section-color(@index + 1);
    }
  }

  .section-color(@color) when (@color = @warning) {
    .set-lumafix(@color, @ideal-warning, .75);
    .colorize(@lumafix);
  }

  .section-color(@color) when (@color = @failure) {
    .set-lumafix(@color, @ideal-failure, .5);
    .colorize(@lumafix);
  }

  .section-color(@color) when (default()) {
    .set-lumafix(@color, @background, .75);
    .colorize(@lumafix);
  }

  .make-section-colors-for(@semantic-colors);
}
