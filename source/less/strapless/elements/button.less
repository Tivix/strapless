.button-elements({
  display: inline-block;
  font-size: 112.5%;
  text-align: center;
  vertical-align: middle;
  min-height: 32px;
  line-height: @line-height;
  padding: 0.4em .8rem;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: none;
  .border-radius();
  outline: none;
  white-space: nowrap;
  text-decoration: none;
  .set-c-color(@background);
  .button-color(@c-color);
  .make-buttons-for(@semantic-colors);
  .no-user-select();
});

.button-elements(@rules) {
  button,
  .button,
  input[type="button"],
  input[type="submit"] { @rules();}
}

.make-buttons-for(@colors) {
  // make buttons for a list of color variable names
  // buttons will use variable names as class names

  @length: length(@colors);

  .make-button();

  .make-button(@index:1) when (@index <= @length) {
    @color-name: extract(@colors, @index);
    @color: @@color-name;

    .set-c-color(@color);

    &.@{color-name} { .button-color(@color);}

    .make-button(@index + 1);
  }
}

.button-color(@color) when (@color = @warning) {
  .set-lumafix(@color; @warning-base; .8;);
  .invert-text-against(@lumafix; @contrast-standard: 3; @button: true;);
}

.button-color(@color) when (default()) {
  .set-lumafix(@color);
  .invert-text-against(@lumafix; @contrast-standard: 3; @button: true;);
}
