main {
  padding: 1em @padding;
  max-width: @content-max-width;
  margin: 0 auto 2em auto;
  text-align: center;
  border-radius: @border-radius;

  > * {
    margin-bottom: 1em;
  }

  p { text-align: left;}

  h1, h2 {
    text-align: center;

    & + p {
      text-align: center;
      font-size: 125%;
      margin-bottom: 1em;
    }
  }

  img {
    margin: 0 auto;
    max-width: 100%;
  }

  section > & {
    border-radius: @border-radius;
  }

  .button-elements({
    font-size: 110%;
    &:only-child { font-size: 125%; margin-bottom: 1em;}
  });

  .make-main-colors-for(@colors) {
    // make main colors for a list of color variable names
    // mains will use variable names as class names

    @iterations: length(@colors);

    .make-main-color(1);

    .make-main-color(@index) when (@index <= @iterations) {

      @color-name: extract(@colors, @index);
      @this-color: @@color-name;

      &.@{color-name} {
        .main-color(@this-color);
      }

      .make-main-color(@index + 1);
    }
  }

  .main-color(@color) when (@color = @warning) {
    .set-lumafix(@color, @ideal-warning, .75);
    .colorize(@lumafix);
  }

  .main-color(@color) when (@color = @failure) {
    .set-lumafix(@color, @ideal-failure, .5);
    .colorize(@lumafix);
  }

  .main-color(@color) when (default()) {
    .set-lumafix(@color, @background, .5);
    .colorize(@lumafix);
  }

  .make-main-colors-for(@semantic-colors);
}
