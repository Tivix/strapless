main {
  &:extend(section all);
  .margin-bottom();
  min-height: 100vh;

  display: -webkit-flex;
  display: flex;
  -webkit-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: left;
  align-items: left;
  -webkit-justify-content: center;
  justify-content: center;

  font-size: 112.5%;

  * {
    max-width: none;

    &:first-child {
      margin-top: 0;
    }
  }

  > * {
    max-width: @page-width;
    //margin-left: auto;
  }

  h1 { font-size: ~"calc(@{font-size} + @{h1-base}vw)";}
  h2 { font-size: ~"calc(@{font-size} + @{h2-base}vw)";}
  h3 { font-size: ~"calc(@{font-size} + @{h3-base}vw)";}
  h4 { font-size: ~"calc(@{font-size} + @{h4-base}vw)";}
  h5 { font-size: ~"calc(@{font-size} + @{h5-base}vw)";}
  h6 { font-size: ~"calc(@{font-size} + @{h6-base}vw)";}

  .on-large-desktop({
    // headlines stop growing at large-desktop breakpoint
    h1 { font-size: @font-size + @large-desktop*@h1-base/100;}
    h2 { font-size: @font-size + @large-desktop*@h2-base/100;}
    h3 { font-size: @font-size + @large-desktop*@h3-base/100;}
    h4 { font-size: @font-size + @large-desktop*@h4-base/100;}
    h5 { font-size: @font-size + @large-desktop*@h5-base/100;}
    h6 { font-size: @font-size + @large-desktop*@h6-base/100;}
  });

  .main-color(@base-color);

  .make-main-colors-for(@semantic-colors);
}

.make-main-colors-for(@colors) {
  // make main colors for a list of color variable names
  // mains will use variable names as class names

  @iterations: length(@colors);

  .make-main-color(1);

  .make-main-color(@index) when (@index <= @iterations) {

    @color-name: extract(@colors, @index);
    @this-color: @@color-name;

    &.@{color-name} {
      .main-color(@this-color);
    }

    .make-main-color(@index + 1);
  }
}

.main-color(@color) when (@color = @warning) {
  .set-lumafix(@color, @warning-base, .75);
  .contrast-text-against(@lumafix);
  .dots(@lumafix);

  .set-contrast-ratio(@lumafix; white;);
  & when (@contrast-ratio > 3) {
    h1, h2, h3 { .tint-text-against(@lumafix; 4.5;);}
  }
}

.main-color(@color) when (@color = @failure) {
  .set-lumafix(@color, @failure-base, .5);
  .contrast-text-against(@lumafix);
  .dots(@lumafix);

  .set-contrast-ratio(@lumafix; white;);
  & when (@contrast-ratio > 3) {
    h1, h2, h3 { .tint-text-against(@lumafix; 4.5;);}
  }
}

.main-color(@color) when (default()) {
  .set-c-color(@color);
  .dots(@c-color); // dots pattern background
  .contrast-text-against(@c-color);
}
